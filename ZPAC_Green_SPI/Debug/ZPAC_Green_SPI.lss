
ZPAC_Green_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e4c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  00001e4c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000104  20000014  00001e60  00010014  2**2
                  ALLOC
  3 .stack        00000400  20000118  00001f64  00010014  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010014  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021797  00000000  00000000  00010097  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028b5  00000000  00000000  0003182e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006e2a  00000000  00000000  000340e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000460  00000000  00000000  0003af0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000860  00000000  00000000  0003b36d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001313f  00000000  00000000  0003bbcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ab56  00000000  00000000  0004ed0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006939a  00000000  00000000  00059862  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000ac8  00000000  00000000  000c2bfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20000518 	.word	0x20000518
       4:	00001a95 	.word	0x00001a95
       8:	00001a91 	.word	0x00001a91
       c:	00001a91 	.word	0x00001a91
	...
      2c:	00001a91 	.word	0x00001a91
	...
      38:	00001a91 	.word	0x00001a91
      3c:	00001a91 	.word	0x00001a91
      40:	00001a91 	.word	0x00001a91
      44:	00001a91 	.word	0x00001a91
      48:	00001a91 	.word	0x00001a91
      4c:	00001a91 	.word	0x00001a91
      50:	00001a91 	.word	0x00001a91
      54:	00001a91 	.word	0x00001a91
      58:	00001a91 	.word	0x00001a91
      5c:	00001a91 	.word	0x00001a91
      60:	00001a91 	.word	0x00001a91
      64:	00000c19 	.word	0x00000c19
      68:	00000c29 	.word	0x00000c29
      6c:	00001a91 	.word	0x00001a91
      70:	00001201 	.word	0x00001201
      74:	00001a91 	.word	0x00001a91
      78:	00001a91 	.word	0x00001a91
      7c:	00001a91 	.word	0x00001a91
      80:	00001a91 	.word	0x00001a91
      84:	00001a91 	.word	0x00001a91
      88:	00001a91 	.word	0x00001a91

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000014 	.word	0x20000014
      ac:	00000000 	.word	0x00000000
      b0:	00001e4c 	.word	0x00001e4c

000000b4 <frame_dummy>:
      b4:	b508      	push	{r3, lr}
      b6:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4807      	ldr	r0, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4908      	ldr	r1, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d003      	beq.n	d4 <frame_dummy+0x20>
      cc:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      ce:	2b00      	cmp	r3, #0
      d0:	d000      	beq.n	d4 <frame_dummy+0x20>
      d2:	4798      	blx	r3
      d4:	bd08      	pop	{r3, pc}
      d6:	46c0      	nop			; (mov r8, r8)
      d8:	00000000 	.word	0x00000000
      dc:	00001e4c 	.word	0x00001e4c
      e0:	20000018 	.word	0x20000018
      e4:	00001e4c 	.word	0x00001e4c
      e8:	00000000 	.word	0x00000000

000000ec <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
      ec:	b500      	push	{lr}
      ee:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
      f0:	ab01      	add	r3, sp, #4
      f2:	2280      	movs	r2, #128	; 0x80
      f4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
      f6:	780a      	ldrb	r2, [r1, #0]
      f8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
      fa:	784a      	ldrb	r2, [r1, #1]
      fc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
      fe:	788a      	ldrb	r2, [r1, #2]
     100:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     102:	1c19      	adds	r1, r3, #0
     104:	4b01      	ldr	r3, [pc, #4]	; (10c <port_pin_set_config+0x20>)
     106:	4798      	blx	r3
}
     108:	b003      	add	sp, #12
     10a:	bd00      	pop	{pc}
     10c:	00001a3d 	.word	0x00001a3d

00000110 <_sercom_get_sync_baud_val>:
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     110:	b510      	push	{r4, lr}
     112:	1c03      	adds	r3, r0, #0

		r = r << 1;
     114:	0849      	lsrs	r1, r1, #1
     116:	2040      	movs	r0, #64	; 0x40
     118:	4299      	cmp	r1, r3
     11a:	d30c      	bcc.n	136 <_sercom_get_sync_baud_val+0x26>
     11c:	2400      	movs	r4, #0
     11e:	1ac9      	subs	r1, r1, r3

		if (n & bit_shift) {
     120:	1c60      	adds	r0, r4, #1
     122:	b280      	uxth	r0, r0
     124:	428b      	cmp	r3, r1
     126:	d801      	bhi.n	12c <_sercom_get_sync_baud_val+0x1c>
     128:	1c04      	adds	r4, r0, #0
     12a:	e7f8      	b.n	11e <_sercom_get_sync_baud_val+0xe>
     12c:	2040      	movs	r0, #64	; 0x40
     12e:	2cff      	cmp	r4, #255	; 0xff
     130:	d801      	bhi.n	136 <_sercom_get_sync_baud_val+0x26>
			r |= 0x01;
     132:	8014      	strh	r4, [r2, #0]
     134:	2000      	movs	r0, #0
     136:	bd10      	pop	{r4, pc}

00000138 <sercom_set_gclk_generator>:
		}

		if (r >= d) {
     138:	b510      	push	{r4, lr}
     13a:	b082      	sub	sp, #8
     13c:	1c04      	adds	r4, r0, #0
     13e:	4b0f      	ldr	r3, [pc, #60]	; (17c <sercom_set_gclk_generator+0x44>)
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d001      	beq.n	14a <sercom_set_gclk_generator+0x12>
			r = r - d;
     146:	2900      	cmp	r1, #0
     148:	d00d      	beq.n	166 <sercom_set_gclk_generator+0x2e>
     14a:	a901      	add	r1, sp, #4
     14c:	700c      	strb	r4, [r1, #0]
			q |= bit_shift;
     14e:	200d      	movs	r0, #13
     150:	4b0b      	ldr	r3, [pc, #44]	; (180 <sercom_set_gclk_generator+0x48>)
     152:	4798      	blx	r3
     154:	200d      	movs	r0, #13
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     156:	4b0b      	ldr	r3, [pc, #44]	; (184 <sercom_set_gclk_generator+0x4c>)
     158:	4798      	blx	r3
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     15a:	4b08      	ldr	r3, [pc, #32]	; (17c <sercom_set_gclk_generator+0x44>)
     15c:	705c      	strb	r4, [r3, #1]
     15e:	2201      	movs	r2, #1
			baud_int = baud_int / BAUD_FP_MAX;
     160:	701a      	strb	r2, [r3, #0]
			if(baud_int < BAUD_INT_MAX) {
     162:	2000      	movs	r0, #0
     164:	e007      	b.n	176 <sercom_set_gclk_generator+0x3e>
     166:	4b05      	ldr	r3, [pc, #20]	; (17c <sercom_set_gclk_generator+0x44>)
     168:	785a      	ldrb	r2, [r3, #1]
     16a:	201d      	movs	r0, #29
     16c:	1b14      	subs	r4, r2, r4
     16e:	1e62      	subs	r2, r4, #1
     170:	4194      	sbcs	r4, r2
     172:	4264      	negs	r4, r4
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     174:	4020      	ands	r0, r4
     176:	b002      	add	sp, #8
     178:	bd10      	pop	{r4, pc}
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     17a:	46c0      	nop			; (mov r8, r8)
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     17c:	20000030 	.word	0x20000030
     180:	00001965 	.word	0x00001965
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     184:	000018d9 	.word	0x000018d9

00000188 <_sercom_get_default_pad>:
	}

	*baudval = baud_calculated;
     188:	4b17      	ldr	r3, [pc, #92]	; (1e8 <_sercom_get_default_pad+0x60>)
	return STATUS_OK;
     18a:	4298      	cmp	r0, r3
}
     18c:	d003      	beq.n	196 <_sercom_get_default_pad+0xe>
     18e:	4b17      	ldr	r3, [pc, #92]	; (1ec <_sercom_get_default_pad+0x64>)
     190:	4298      	cmp	r0, r3
     192:	d011      	beq.n	1b8 <_sercom_get_default_pad+0x30>
     194:	e021      	b.n	1da <_sercom_get_default_pad+0x52>
     196:	2901      	cmp	r1, #1
     198:	d021      	beq.n	1de <_sercom_get_default_pad+0x56>
     19a:	2900      	cmp	r1, #0
     19c:	d004      	beq.n	1a8 <_sercom_get_default_pad+0x20>
     19e:	2902      	cmp	r1, #2
     1a0:	d006      	beq.n	1b0 <_sercom_get_default_pad+0x28>
     1a2:	2903      	cmp	r1, #3
     1a4:	d006      	beq.n	1b4 <_sercom_get_default_pad+0x2c>
     1a6:	e001      	b.n	1ac <_sercom_get_default_pad+0x24>
     1a8:	4811      	ldr	r0, [pc, #68]	; (1f0 <_sercom_get_default_pad+0x68>)
     1aa:	e01b      	b.n	1e4 <_sercom_get_default_pad+0x5c>
     1ac:	2000      	movs	r0, #0
     1ae:	e019      	b.n	1e4 <_sercom_get_default_pad+0x5c>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     1b0:	4810      	ldr	r0, [pc, #64]	; (1f4 <_sercom_get_default_pad+0x6c>)
     1b2:	e017      	b.n	1e4 <_sercom_get_default_pad+0x5c>
     1b4:	4810      	ldr	r0, [pc, #64]	; (1f8 <_sercom_get_default_pad+0x70>)
     1b6:	e015      	b.n	1e4 <_sercom_get_default_pad+0x5c>
     1b8:	2901      	cmp	r1, #1
     1ba:	d012      	beq.n	1e2 <_sercom_get_default_pad+0x5a>
     1bc:	2900      	cmp	r1, #0
     1be:	d004      	beq.n	1ca <_sercom_get_default_pad+0x42>
     1c0:	2902      	cmp	r1, #2
     1c2:	d006      	beq.n	1d2 <_sercom_get_default_pad+0x4a>
     1c4:	2903      	cmp	r1, #3
     1c6:	d006      	beq.n	1d6 <_sercom_get_default_pad+0x4e>
     1c8:	e001      	b.n	1ce <_sercom_get_default_pad+0x46>
     1ca:	480c      	ldr	r0, [pc, #48]	; (1fc <_sercom_get_default_pad+0x74>)
     1cc:	e00a      	b.n	1e4 <_sercom_get_default_pad+0x5c>
	}

	Assert(false);
	return 0;
     1ce:	2000      	movs	r0, #0
     1d0:	e008      	b.n	1e4 <_sercom_get_default_pad+0x5c>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     1d2:	480b      	ldr	r0, [pc, #44]	; (200 <_sercom_get_default_pad+0x78>)
     1d4:	e006      	b.n	1e4 <_sercom_get_default_pad+0x5c>
     1d6:	480b      	ldr	r0, [pc, #44]	; (204 <_sercom_get_default_pad+0x7c>)
     1d8:	e004      	b.n	1e4 <_sercom_get_default_pad+0x5c>
	}

	Assert(false);
	return 0;
     1da:	2000      	movs	r0, #0
     1dc:	e002      	b.n	1e4 <_sercom_get_default_pad+0x5c>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     1de:	480a      	ldr	r0, [pc, #40]	; (208 <_sercom_get_default_pad+0x80>)
     1e0:	e000      	b.n	1e4 <_sercom_get_default_pad+0x5c>
     1e2:	480a      	ldr	r0, [pc, #40]	; (20c <_sercom_get_default_pad+0x84>)
	}

	Assert(false);
	return 0;
}
     1e4:	4770      	bx	lr
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	42000800 	.word	0x42000800
     1ec:	42000c00 	.word	0x42000c00
     1f0:	000e0002 	.word	0x000e0002
     1f4:	00080003 	.word	0x00080003
     1f8:	00090003 	.word	0x00090003
     1fc:	001e0002 	.word	0x001e0002
     200:	00180002 	.word	0x00180002
     204:	00190002 	.word	0x00190002
     208:	000f0002 	.word	0x000f0002
     20c:	001f0002 	.word	0x001f0002

00000210 <spi_master_callback_received>:
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
// SPI RX Callback Function
static void spi_master_callback_received(const struct spi_module *const module) {
	
}
     210:	4770      	bx	lr
     212:	46c0      	nop			; (mov r8, r8)

00000214 <spi_master_callback_transceived>:

static void spi_master_callback_transmitted(const struct spi_module *const module) {
	spi_read_buffer_job(&spi_master, rd_buffer, SYSTEM_SLAVE_TX_SINGLE_BYTE, 0x00);
}

static void spi_master_callback_transceived(const struct spi_module *const module) {
     214:	b508      	push	{r3, lr}
	if ( rd_buffer[0] == 0 ) {
     216:	4b05      	ldr	r3, [pc, #20]	; (22c <spi_master_callback_transceived+0x18>)
     218:	781b      	ldrb	r3, [r3, #0]
     21a:	2b00      	cmp	r3, #0
     21c:	d100      	bne.n	220 <spi_master_callback_transceived+0xc>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
     21e:	46c0      	nop			; (mov r8, r8)
		nop();
	}
	spi_select_slave(&spi_master, &spi_CAN_controller, false);
     220:	4803      	ldr	r0, [pc, #12]	; (230 <spi_master_callback_transceived+0x1c>)
     222:	4904      	ldr	r1, [pc, #16]	; (234 <spi_master_callback_transceived+0x20>)
     224:	2200      	movs	r2, #0
     226:	4b04      	ldr	r3, [pc, #16]	; (238 <spi_master_callback_transceived+0x24>)
     228:	4798      	blx	r3
     22a:	bd08      	pop	{r3, pc}
     22c:	20000078 	.word	0x20000078
     230:	20000084 	.word	0x20000084
     234:	200000c4 	.word	0x200000c4
     238:	000005e9 	.word	0x000005e9

0000023c <spi_master_callback_transmitted>:
// SPI RX Callback Function
static void spi_master_callback_received(const struct spi_module *const module) {
	
}

static void spi_master_callback_transmitted(const struct spi_module *const module) {
     23c:	b510      	push	{r4, lr}
	spi_read_buffer_job(&spi_master, rd_buffer, SYSTEM_SLAVE_TX_SINGLE_BYTE, 0x00);
     23e:	4803      	ldr	r0, [pc, #12]	; (24c <spi_master_callback_transmitted+0x10>)
     240:	4903      	ldr	r1, [pc, #12]	; (250 <spi_master_callback_transmitted+0x14>)
     242:	2201      	movs	r2, #1
     244:	2300      	movs	r3, #0
     246:	4c03      	ldr	r4, [pc, #12]	; (254 <spi_master_callback_transmitted+0x18>)
     248:	47a0      	blx	r4
}
     24a:	bd10      	pop	{r4, pc}
     24c:	20000084 	.word	0x20000084
     250:	20000078 	.word	0x20000078
     254:	00000909 	.word	0x00000909

00000258 <fcnSPIconfiguration>:
	// Configure the SPI
	fcnSPIconfiguration();
	
}

void fcnSPIconfiguration (void) {
     258:	b5f0      	push	{r4, r5, r6, r7, lr}
     25a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     25c:	ab02      	add	r3, sp, #8
     25e:	2101      	movs	r1, #1
     260:	7019      	strb	r1, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     262:	2200      	movs	r2, #0
     264:	9203      	str	r2, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     266:	9204      	str	r2, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     268:	20c0      	movs	r0, #192	; 0xc0
     26a:	0380      	lsls	r0, r0, #14
     26c:	9005      	str	r0, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     26e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     270:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     272:	7499      	strb	r1, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     274:	74d9      	strb	r1, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     276:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     278:	2024      	movs	r0, #36	; 0x24
     27a:	541a      	strb	r2, [r3, r0]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     27c:	9209      	str	r2, [sp, #36]	; 0x24
     27e:	920a      	str	r2, [sp, #40]	; 0x28

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     280:	4841      	ldr	r0, [pc, #260]	; (388 <fcnSPIconfiguration+0x130>)
     282:	9008      	str	r0, [sp, #32]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     284:	920c      	str	r2, [sp, #48]	; 0x30
	config->pinmux_pad1 = PINMUX_DEFAULT;
     286:	920d      	str	r2, [sp, #52]	; 0x34
	config->pinmux_pad2 = PINMUX_DEFAULT;
     288:	920e      	str	r2, [sp, #56]	; 0x38
	config->pinmux_pad3 = PINMUX_DEFAULT;
     28a:	920f      	str	r2, [sp, #60]	; 0x3c
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     28c:	4c3f      	ldr	r4, [pc, #252]	; (38c <fcnSPIconfiguration+0x134>)
     28e:	2318      	movs	r3, #24
     290:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     292:	7062      	strb	r2, [r4, #1]
	slave->address         = config->address;
     294:	70a2      	strb	r2, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     296:	4668      	mov	r0, sp
     298:	7041      	strb	r1, [r0, #1]
	config->powersave  = false;
     29a:	7082      	strb	r2, [r0, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     29c:	7001      	strb	r1, [r0, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     29e:	2018      	movs	r0, #24
     2a0:	4669      	mov	r1, sp
     2a2:	4b3b      	ldr	r3, [pc, #236]	; (390 <fcnSPIconfiguration+0x138>)
     2a4:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     2a6:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2a8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2aa:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2ac:	2900      	cmp	r1, #0
     2ae:	d103      	bne.n	2b8 <fcnSPIconfiguration+0x60>
		return &(ports[port_index]->Group[group_index]);
     2b0:	095a      	lsrs	r2, r3, #5
     2b2:	01d2      	lsls	r2, r2, #7
     2b4:	4937      	ldr	r1, [pc, #220]	; (394 <fcnSPIconfiguration+0x13c>)
     2b6:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2b8:	211f      	movs	r1, #31
     2ba:	4019      	ands	r1, r3
     2bc:	2301      	movs	r3, #1
     2be:	1c18      	adds	r0, r3, #0
     2c0:	4088      	lsls	r0, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2c2:	6190      	str	r0, [r2, #24]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     2c4:	4c34      	ldr	r4, [pc, #208]	; (398 <fcnSPIconfiguration+0x140>)
     2c6:	220f      	movs	r2, #15
     2c8:	7022      	strb	r2, [r4, #0]
	slave->address_enabled = config->address_enabled;
     2ca:	aa01      	add	r2, sp, #4
     2cc:	7851      	ldrb	r1, [r2, #1]
     2ce:	7061      	strb	r1, [r4, #1]
	slave->address         = config->address;
     2d0:	7892      	ldrb	r2, [r2, #2]
     2d2:	70a2      	strb	r2, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2d4:	4669      	mov	r1, sp
     2d6:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     2d8:	2200      	movs	r2, #0
     2da:	708a      	strb	r2, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     2dc:	700b      	strb	r3, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2de:	200f      	movs	r0, #15
     2e0:	4b2b      	ldr	r3, [pc, #172]	; (390 <fcnSPIconfiguration+0x138>)
     2e2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     2e4:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2e6:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2e8:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2ea:	2900      	cmp	r1, #0
     2ec:	d103      	bne.n	2f6 <fcnSPIconfiguration+0x9e>
		return &(ports[port_index]->Group[group_index]);
     2ee:	095a      	lsrs	r2, r3, #5
     2f0:	01d2      	lsls	r2, r2, #7
     2f2:	4828      	ldr	r0, [pc, #160]	; (394 <fcnSPIconfiguration+0x13c>)
     2f4:	1812      	adds	r2, r2, r0
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2f6:	271f      	movs	r7, #31
     2f8:	403b      	ands	r3, r7
     2fa:	2601      	movs	r6, #1
     2fc:	1c31      	adds	r1, r6, #0
     2fe:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     300:	6191      	str	r1, [r2, #24]
	
	// CAN-Interface Setting
	spi_CAN_controller_config.ss_pin = PIN_PA15;
	spi_attach_slave(&spi_CAN_controller, &spi_CAN_controller_config);
	
	spi_conf.mode_specific.master.baudrate = 10000000;
     302:	4b26      	ldr	r3, [pc, #152]	; (39c <fcnSPIconfiguration+0x144>)
     304:	9308      	str	r3, [sp, #32]
	spi_conf.transfer_mode = SPI_TRANSFER_MODE_0;
     306:	2300      	movs	r3, #0
     308:	9304      	str	r3, [sp, #16]
	
	spi_conf.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
     30a:	2380      	movs	r3, #128	; 0x80
     30c:	025b      	lsls	r3, r3, #9
     30e:	9305      	str	r3, [sp, #20]
	// Pad Configuration
	spi_conf.pinmux_pad0 = PINMUX_PA14C_SERCOM0_PAD0;
     310:	4b23      	ldr	r3, [pc, #140]	; (3a0 <fcnSPIconfiguration+0x148>)
     312:	930c      	str	r3, [sp, #48]	; 0x30
	spi_conf.pinmux_pad1 = PINMUX_UNUSED;
     314:	2301      	movs	r3, #1
     316:	425b      	negs	r3, r3
     318:	930d      	str	r3, [sp, #52]	; 0x34
	spi_conf.pinmux_pad2 = PINMUX_PA04C_SERCOM0_PAD2;
     31a:	4b22      	ldr	r3, [pc, #136]	; (3a4 <fcnSPIconfiguration+0x14c>)
     31c:	930e      	str	r3, [sp, #56]	; 0x38
	spi_conf.pinmux_pad3 = PINMUX_PA05C_SERCOM0_PAD3;
     31e:	4b22      	ldr	r3, [pc, #136]	; (3a8 <fcnSPIconfiguration+0x150>)
     320:	930f      	str	r3, [sp, #60]	; 0x3c

	

	// Initialize the previous settings
	spi_init(&spi_master, SERCOM0, &spi_conf);
     322:	4d22      	ldr	r5, [pc, #136]	; (3ac <fcnSPIconfiguration+0x154>)
     324:	1c28      	adds	r0, r5, #0
     326:	4922      	ldr	r1, [pc, #136]	; (3b0 <fcnSPIconfiguration+0x158>)
     328:	aa02      	add	r2, sp, #8
     32a:	4b22      	ldr	r3, [pc, #136]	; (3b4 <fcnSPIconfiguration+0x15c>)
     32c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     32e:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     330:	1c20      	adds	r0, r4, #0
     332:	4b21      	ldr	r3, [pc, #132]	; (3b8 <fcnSPIconfiguration+0x160>)
     334:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     336:	4007      	ands	r7, r0
     338:	40be      	lsls	r6, r7
     33a:	4b20      	ldr	r3, [pc, #128]	; (3bc <fcnSPIconfiguration+0x164>)
     33c:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     33e:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     340:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     342:	2b00      	cmp	r3, #0
     344:	d1fc      	bne.n	340 <fcnSPIconfiguration+0xe8>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     346:	6822      	ldr	r2, [r4, #0]
     348:	2302      	movs	r3, #2
     34a:	4313      	orrs	r3, r2
     34c:	6023      	str	r3, [r4, #0]

	// Enable the module
	spi_enable(&spi_master);

	// ******** Callback setup
	spi_register_callback(&spi_master, spi_master_callback_received, SPI_CALLBACK_BUFFER_RECEIVED);
     34e:	4c17      	ldr	r4, [pc, #92]	; (3ac <fcnSPIconfiguration+0x154>)
     350:	1c20      	adds	r0, r4, #0
     352:	491b      	ldr	r1, [pc, #108]	; (3c0 <fcnSPIconfiguration+0x168>)
     354:	2201      	movs	r2, #1
     356:	4e1b      	ldr	r6, [pc, #108]	; (3c4 <fcnSPIconfiguration+0x16c>)
     358:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
     35a:	2537      	movs	r5, #55	; 0x37
     35c:	5d62      	ldrb	r2, [r4, r5]
     35e:	2302      	movs	r3, #2
     360:	4313      	orrs	r3, r2
     362:	5563      	strb	r3, [r4, r5]
	spi_enable_callback(&spi_master, SPI_CALLBACK_BUFFER_RECEIVED);
	
	spi_register_callback(&spi_master, spi_master_callback_transmitted, SPI_CALLBACK_BUFFER_TRANSMITTED);
     364:	1c20      	adds	r0, r4, #0
     366:	4918      	ldr	r1, [pc, #96]	; (3c8 <fcnSPIconfiguration+0x170>)
     368:	2200      	movs	r2, #0
     36a:	47b0      	blx	r6
     36c:	5d62      	ldrb	r2, [r4, r5]
     36e:	2301      	movs	r3, #1
     370:	4313      	orrs	r3, r2
     372:	5563      	strb	r3, [r4, r5]
	spi_enable_callback(&spi_master, SPI_CALLBACK_BUFFER_TRANSMITTED);
	
	spi_register_callback(&spi_master, spi_master_callback_transceived, SPI_CALLBACK_BUFFER_TRANSCEIVED);
     374:	1c20      	adds	r0, r4, #0
     376:	4915      	ldr	r1, [pc, #84]	; (3cc <fcnSPIconfiguration+0x174>)
     378:	2202      	movs	r2, #2
     37a:	47b0      	blx	r6
     37c:	5d62      	ldrb	r2, [r4, r5]
     37e:	2304      	movs	r3, #4
     380:	4313      	orrs	r3, r2
     382:	5563      	strb	r3, [r4, r5]
	spi_enable_callback(&spi_master, SPI_CALLBACK_BUFFER_TRANSCEIVED);
}
     384:	b011      	add	sp, #68	; 0x44
     386:	bdf0      	pop	{r4, r5, r6, r7, pc}
     388:	000186a0 	.word	0x000186a0
     38c:	200000c0 	.word	0x200000c0
     390:	000000ed 	.word	0x000000ed
     394:	41004400 	.word	0x41004400
     398:	200000c4 	.word	0x200000c4
     39c:	00989680 	.word	0x00989680
     3a0:	000e0002 	.word	0x000e0002
     3a4:	00040002 	.word	0x00040002
     3a8:	00050002 	.word	0x00050002
     3ac:	20000084 	.word	0x20000084
     3b0:	42000800 	.word	0x42000800
     3b4:	000003dd 	.word	0x000003dd
     3b8:	00000bed 	.word	0x00000bed
     3bc:	e000e100 	.word	0xe000e100
     3c0:	00000211 	.word	0x00000211
     3c4:	000008f1 	.word	0x000008f1
     3c8:	0000023d 	.word	0x0000023d
     3cc:	00000215 	.word	0x00000215

000003d0 <bastian_complete_sercom_setup>:
struct spi_slave_inst spi_CAN_controller;

////////////////////  BASTIAN SERCOM  ////////////////////////////////////
//		Perform complete SERCOM module setup for the application
//		Takes no arguments
void bastian_complete_sercom_setup(void) {
     3d0:	b508      	push	{r3, lr}
	// Configure the SPI
	fcnSPIconfiguration();
     3d2:	4b01      	ldr	r3, [pc, #4]	; (3d8 <bastian_complete_sercom_setup+0x8>)
     3d4:	4798      	blx	r3
	
}
     3d6:	bd08      	pop	{r3, pc}
     3d8:	00000259 	.word	0x00000259

000003dc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3de:	4647      	mov	r7, r8
     3e0:	b480      	push	{r7}
     3e2:	b088      	sub	sp, #32
     3e4:	1c05      	adds	r5, r0, #0
     3e6:	1c0c      	adds	r4, r1, #0
     3e8:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     3ea:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     3ec:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     3ee:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     3f0:	079a      	lsls	r2, r3, #30
     3f2:	d500      	bpl.n	3f6 <spi_init+0x1a>
     3f4:	e0d9      	b.n	5aa <STACK_SIZE+0x1aa>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     3f6:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     3f8:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     3fa:	07da      	lsls	r2, r3, #31
     3fc:	d500      	bpl.n	400 <STACK_SIZE>
     3fe:	e0d4      	b.n	5aa <STACK_SIZE+0x1aa>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     400:	1c08      	adds	r0, r1, #0
     402:	4b6c      	ldr	r3, [pc, #432]	; (5b4 <STACK_SIZE+0x1b4>)
     404:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     406:	4b6c      	ldr	r3, [pc, #432]	; (5b8 <STACK_SIZE+0x1b8>)
     408:	6a19      	ldr	r1, [r3, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     40a:	1c82      	adds	r2, r0, #2
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     40c:	2701      	movs	r7, #1
     40e:	4097      	lsls	r7, r2
     410:	1c3a      	adds	r2, r7, #0
     412:	430a      	orrs	r2, r1
     414:	621a      	str	r2, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     416:	a907      	add	r1, sp, #28
     418:	2724      	movs	r7, #36	; 0x24
     41a:	5df3      	ldrb	r3, [r6, r7]
     41c:	700b      	strb	r3, [r1, #0]
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     41e:	300e      	adds	r0, #14

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     420:	b2c0      	uxtb	r0, r0
     422:	4680      	mov	r8, r0
     424:	4b65      	ldr	r3, [pc, #404]	; (5bc <STACK_SIZE+0x1bc>)
     426:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     428:	4640      	mov	r0, r8
     42a:	4b65      	ldr	r3, [pc, #404]	; (5c0 <STACK_SIZE+0x1c0>)
     42c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     42e:	5df0      	ldrb	r0, [r6, r7]
     430:	2100      	movs	r1, #0
     432:	4b64      	ldr	r3, [pc, #400]	; (5c4 <STACK_SIZE+0x1c4>)
     434:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     436:	7833      	ldrb	r3, [r6, #0]
     438:	2b01      	cmp	r3, #1
     43a:	d103      	bne.n	444 <STACK_SIZE+0x44>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
     43c:	6822      	ldr	r2, [r4, #0]
     43e:	230c      	movs	r3, #12
     440:	4313      	orrs	r3, r2
     442:	6023      	str	r3, [r4, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     444:	7833      	ldrb	r3, [r6, #0]
     446:	2b00      	cmp	r3, #0
     448:	d000      	beq.n	44c <STACK_SIZE+0x4c>
     44a:	e0ab      	b.n	5a4 <STACK_SIZE+0x1a4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_SLAVE;
     44c:	6822      	ldr	r2, [r4, #0]
     44e:	2308      	movs	r3, #8
     450:	4313      	orrs	r3, r2
     452:	6023      	str	r3, [r4, #0]
     454:	e0a6      	b.n	5a4 <STACK_SIZE+0x1a4>
     456:	18ea      	adds	r2, r5, r3
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     458:	60d1      	str	r1, [r2, #12]
     45a:	3304      	adds	r3, #4
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     45c:	2b1c      	cmp	r3, #28
     45e:	d1fa      	bne.n	456 <STACK_SIZE+0x56>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
     460:	2300      	movs	r3, #0
     462:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     464:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     466:	2400      	movs	r4, #0
     468:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     46a:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     46c:	2336      	movs	r3, #54	; 0x36
     46e:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     470:	2337      	movs	r3, #55	; 0x37
     472:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     474:	2338      	movs	r3, #56	; 0x38
     476:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     478:	2303      	movs	r3, #3
     47a:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     47c:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     47e:	6828      	ldr	r0, [r5, #0]
     480:	4b4c      	ldr	r3, [pc, #304]	; (5b4 <STACK_SIZE+0x1b4>)
     482:	4798      	blx	r3
     484:	1c07      	adds	r7, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     486:	4950      	ldr	r1, [pc, #320]	; (5c8 <STACK_SIZE+0x1c8>)
     488:	4b50      	ldr	r3, [pc, #320]	; (5cc <STACK_SIZE+0x1cc>)
     48a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     48c:	00bf      	lsls	r7, r7, #2
     48e:	4b50      	ldr	r3, [pc, #320]	; (5d0 <STACK_SIZE+0x1d0>)
     490:	50fd      	str	r5, [r7, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     492:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     494:	ab02      	add	r3, sp, #8
     496:	2280      	movs	r2, #128	; 0x80
     498:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     49a:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     49c:	2201      	movs	r2, #1
     49e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     4a0:	70dc      	strb	r4, [r3, #3]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
     4a2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     4a4:	9303      	str	r3, [sp, #12]
     4a6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
     4a8:	9004      	str	r0, [sp, #16]
     4aa:	6b32      	ldr	r2, [r6, #48]	; 0x30
     4ac:	9205      	str	r2, [sp, #20]
     4ae:	6b73      	ldr	r3, [r6, #52]	; 0x34
     4b0:	9306      	str	r3, [sp, #24]
     4b2:	2400      	movs	r4, #0
     4b4:	b2e1      	uxtb	r1, r4
     4b6:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     4b8:	aa03      	add	r2, sp, #12
     4ba:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     4bc:	2800      	cmp	r0, #0
     4be:	d102      	bne.n	4c6 <STACK_SIZE+0xc6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     4c0:	1c38      	adds	r0, r7, #0
     4c2:	4a44      	ldr	r2, [pc, #272]	; (5d4 <STACK_SIZE+0x1d4>)
     4c4:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     4c6:	1c43      	adds	r3, r0, #1
     4c8:	d006      	beq.n	4d8 <STACK_SIZE+0xd8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     4ca:	466a      	mov	r2, sp
     4cc:	7210      	strb	r0, [r2, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     4ce:	0c00      	lsrs	r0, r0, #16
     4d0:	b2c0      	uxtb	r0, r0
     4d2:	a902      	add	r1, sp, #8
     4d4:	4b40      	ldr	r3, [pc, #256]	; (5d8 <STACK_SIZE+0x1d8>)
     4d6:	4798      	blx	r3
     4d8:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     4da:	2c04      	cmp	r4, #4
     4dc:	d1ea      	bne.n	4b4 <STACK_SIZE+0xb4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     4de:	7833      	ldrb	r3, [r6, #0]
     4e0:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     4e2:	7c33      	ldrb	r3, [r6, #16]
     4e4:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     4e6:	7cb3      	ldrb	r3, [r6, #18]
     4e8:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     4ea:	7d33      	ldrb	r3, [r6, #20]
     4ec:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     4ee:	2200      	movs	r2, #0
     4f0:	466b      	mov	r3, sp
     4f2:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     4f4:	7833      	ldrb	r3, [r6, #0]
     4f6:	2b01      	cmp	r3, #1
     4f8:	d114      	bne.n	524 <STACK_SIZE+0x124>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     4fa:	6828      	ldr	r0, [r5, #0]
     4fc:	4b2d      	ldr	r3, [pc, #180]	; (5b4 <STACK_SIZE+0x1b4>)
     4fe:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     500:	300e      	adds	r0, #14
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     502:	b2c0      	uxtb	r0, r0
     504:	4b35      	ldr	r3, [pc, #212]	; (5dc <STACK_SIZE+0x1dc>)
     506:	4798      	blx	r3
     508:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     50a:	69b0      	ldr	r0, [r6, #24]
     50c:	466a      	mov	r2, sp
     50e:	3206      	adds	r2, #6
     510:	4b33      	ldr	r3, [pc, #204]	; (5e0 <STACK_SIZE+0x1e0>)
     512:	4798      	blx	r3
     514:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     516:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     518:	2b00      	cmp	r3, #0
     51a:	d146      	bne.n	5aa <STACK_SIZE+0x1aa>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     51c:	466b      	mov	r3, sp
     51e:	3306      	adds	r3, #6
     520:	781b      	ldrb	r3, [r3, #0]
     522:	733b      	strb	r3, [r7, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     524:	7833      	ldrb	r3, [r6, #0]
     526:	2b00      	cmp	r3, #0
     528:	d10f      	bne.n	54a <STACK_SIZE+0x14a>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     52a:	69b1      	ldr	r1, [r6, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     52c:	8bb3      	ldrh	r3, [r6, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     52e:	6a78      	ldr	r0, [r7, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     530:	7ff4      	ldrb	r4, [r6, #31]
     532:	0424      	lsls	r4, r4, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     534:	7fb2      	ldrb	r2, [r6, #30]
     536:	4322      	orrs	r2, r4

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     538:	4302      	orrs	r2, r0
     53a:	627a      	str	r2, [r7, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     53c:	2220      	movs	r2, #32
     53e:	5cb2      	ldrb	r2, [r6, r2]
     540:	2a00      	cmp	r2, #0
     542:	d004      	beq.n	54e <STACK_SIZE+0x14e>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     544:	2240      	movs	r2, #64	; 0x40
     546:	4313      	orrs	r3, r2
     548:	e001      	b.n	54e <STACK_SIZE+0x14e>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     54a:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     54c:	2100      	movs	r1, #0
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     54e:	68b2      	ldr	r2, [r6, #8]
     550:	6870      	ldr	r0, [r6, #4]
     552:	4302      	orrs	r2, r0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     554:	68f0      	ldr	r0, [r6, #12]
     556:	4302      	orrs	r2, r0

	/* Set mux setting */
	ctrla |= config->mux_setting;
     558:	430a      	orrs	r2, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
     55a:	7c31      	ldrb	r1, [r6, #16]
     55c:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     55e:	7c71      	ldrb	r1, [r6, #17]
     560:	2900      	cmp	r1, #0
     562:	d103      	bne.n	56c <STACK_SIZE+0x16c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     564:	491f      	ldr	r1, [pc, #124]	; (5e4 <STACK_SIZE+0x1e4>)
     566:	7889      	ldrb	r1, [r1, #2]
     568:	0788      	lsls	r0, r1, #30
     56a:	d501      	bpl.n	570 <STACK_SIZE+0x170>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     56c:	2180      	movs	r1, #128	; 0x80
     56e:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     570:	7cb1      	ldrb	r1, [r6, #18]
     572:	2900      	cmp	r1, #0
     574:	d002      	beq.n	57c <STACK_SIZE+0x17c>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     576:	2180      	movs	r1, #128	; 0x80
     578:	0289      	lsls	r1, r1, #10
     57a:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     57c:	7cf1      	ldrb	r1, [r6, #19]
     57e:	2900      	cmp	r1, #0
     580:	d002      	beq.n	588 <STACK_SIZE+0x188>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     582:	2180      	movs	r1, #128	; 0x80
     584:	0089      	lsls	r1, r1, #2
     586:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     588:	7d31      	ldrb	r1, [r6, #20]
     58a:	2900      	cmp	r1, #0
     58c:	d002      	beq.n	594 <STACK_SIZE+0x194>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     58e:	2180      	movs	r1, #128	; 0x80
     590:	0189      	lsls	r1, r1, #6
     592:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     594:	6839      	ldr	r1, [r7, #0]
     596:	430a      	orrs	r2, r1
     598:	603a      	str	r2, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     59a:	687a      	ldr	r2, [r7, #4]
     59c:	4313      	orrs	r3, r2
     59e:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
     5a0:	2000      	movs	r0, #0
     5a2:	e002      	b.n	5aa <STACK_SIZE+0x1aa>
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     5a4:	2300      	movs	r3, #0
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     5a6:	2100      	movs	r1, #0
     5a8:	e755      	b.n	456 <STACK_SIZE+0x56>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     5aa:	b008      	add	sp, #32
     5ac:	bc04      	pop	{r2}
     5ae:	4690      	mov	r8, r2
     5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	00000b8d 	.word	0x00000b8d
     5b8:	40000400 	.word	0x40000400
     5bc:	00001965 	.word	0x00001965
     5c0:	000018d9 	.word	0x000018d9
     5c4:	00000139 	.word	0x00000139
     5c8:	000009a9 	.word	0x000009a9
     5cc:	00000bb9 	.word	0x00000bb9
     5d0:	200000cc 	.word	0x200000cc
     5d4:	00000189 	.word	0x00000189
     5d8:	00001a3d 	.word	0x00001a3d
     5dc:	00001981 	.word	0x00001981
     5e0:	00000111 	.word	0x00000111
     5e4:	41002000 	.word	0x41002000

000005e8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     5e8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     5ea:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     5ec:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     5ee:	2c01      	cmp	r4, #1
     5f0:	d16c      	bne.n	6cc <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     5f2:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     5f4:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     5f6:	2c00      	cmp	r4, #0
     5f8:	d168      	bne.n	6cc <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
     5fa:	2a00      	cmp	r2, #0
     5fc:	d057      	beq.n	6ae <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     5fe:	784b      	ldrb	r3, [r1, #1]
     600:	2b00      	cmp	r3, #0
     602:	d044      	beq.n	68e <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     604:	6802      	ldr	r2, [r0, #0]
     606:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     608:	07dc      	lsls	r4, r3, #31
     60a:	d40f      	bmi.n	62c <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     60c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     60e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     610:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     612:	2900      	cmp	r1, #0
     614:	d103      	bne.n	61e <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
     616:	095a      	lsrs	r2, r3, #5
     618:	01d2      	lsls	r2, r2, #7
     61a:	492d      	ldr	r1, [pc, #180]	; (6d0 <spi_select_slave+0xe8>)
     61c:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     61e:	211f      	movs	r1, #31
     620:	400b      	ands	r3, r1
     622:	2101      	movs	r1, #1
     624:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     626:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     628:	2305      	movs	r3, #5
     62a:	e04f      	b.n	6cc <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     62c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     62e:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     630:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     632:	2c00      	cmp	r4, #0
     634:	d103      	bne.n	63e <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
     636:	095a      	lsrs	r2, r3, #5
     638:	01d2      	lsls	r2, r2, #7
     63a:	4c25      	ldr	r4, [pc, #148]	; (6d0 <spi_select_slave+0xe8>)
     63c:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     63e:	241f      	movs	r4, #31
     640:	4023      	ands	r3, r4
     642:	2401      	movs	r4, #1
     644:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     646:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     648:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     64a:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     64c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     64e:	07d4      	lsls	r4, r2, #31
     650:	d500      	bpl.n	654 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     652:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
     654:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     656:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     658:	2a00      	cmp	r2, #0
     65a:	d137      	bne.n	6cc <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     65c:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     65e:	2104      	movs	r1, #4
     660:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     662:	420b      	tst	r3, r1
     664:	d0fc      	beq.n	660 <spi_select_slave+0x78>
     666:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     668:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     66a:	074c      	lsls	r4, r1, #29
     66c:	d52e      	bpl.n	6cc <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     66e:	8b53      	ldrh	r3, [r2, #26]
     670:	0759      	lsls	r1, r3, #29
     672:	d503      	bpl.n	67c <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     674:	8b51      	ldrh	r1, [r2, #26]
     676:	2304      	movs	r3, #4
     678:	430b      	orrs	r3, r1
     67a:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     67c:	7983      	ldrb	r3, [r0, #6]
     67e:	2b01      	cmp	r3, #1
     680:	d102      	bne.n	688 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     682:	6a93      	ldr	r3, [r2, #40]	; 0x28
     684:	2300      	movs	r3, #0
     686:	e021      	b.n	6cc <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     688:	6a93      	ldr	r3, [r2, #40]	; 0x28
     68a:	2300      	movs	r3, #0
     68c:	e01e      	b.n	6cc <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     68e:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     690:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     692:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     694:	2900      	cmp	r1, #0
     696:	d103      	bne.n	6a0 <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
     698:	095a      	lsrs	r2, r3, #5
     69a:	01d2      	lsls	r2, r2, #7
     69c:	4c0c      	ldr	r4, [pc, #48]	; (6d0 <spi_select_slave+0xe8>)
     69e:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6a0:	211f      	movs	r1, #31
     6a2:	400b      	ands	r3, r1
     6a4:	2101      	movs	r1, #1
     6a6:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     6a8:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     6aa:	2300      	movs	r3, #0
     6ac:	e00e      	b.n	6cc <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     6ae:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     6b0:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     6b2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     6b4:	2900      	cmp	r1, #0
     6b6:	d103      	bne.n	6c0 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
     6b8:	095a      	lsrs	r2, r3, #5
     6ba:	01d2      	lsls	r2, r2, #7
     6bc:	4904      	ldr	r1, [pc, #16]	; (6d0 <spi_select_slave+0xe8>)
     6be:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6c0:	211f      	movs	r1, #31
     6c2:	400b      	ands	r3, r1
     6c4:	2101      	movs	r1, #1
     6c6:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     6c8:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     6ca:	2300      	movs	r3, #0
}
     6cc:	1c18      	adds	r0, r3, #0
     6ce:	bd10      	pop	{r4, pc}
     6d0:	41004400 	.word	0x41004400

000006d4 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6d6:	465f      	mov	r7, fp
     6d8:	4656      	mov	r6, sl
     6da:	464d      	mov	r5, r9
     6dc:	4644      	mov	r4, r8
     6de:	b4f0      	push	{r4, r5, r6, r7}
     6e0:	b083      	sub	sp, #12
     6e2:	1c04      	adds	r4, r0, #0
     6e4:	4692      	mov	sl, r2
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     6e6:	2338      	movs	r3, #56	; 0x38
     6e8:	5cc0      	ldrb	r0, [r0, r3]
     6ea:	b2c0      	uxtb	r0, r0
     6ec:	2805      	cmp	r0, #5
     6ee:	d100      	bne.n	6f2 <spi_write_buffer_wait+0x1e>
     6f0:	e0f1      	b.n	8d6 <spi_write_buffer_wait+0x202>
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     6f2:	2017      	movs	r0, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     6f4:	2a00      	cmp	r2, #0
     6f6:	d100      	bne.n	6fa <spi_write_buffer_wait+0x26>
     6f8:	e0ed      	b.n	8d6 <spi_write_buffer_wait+0x202>
		return STATUS_ERR_INVALID_ARG;
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     6fa:	7963      	ldrb	r3, [r4, #5]
     6fc:	2b00      	cmp	r3, #0
     6fe:	d105      	bne.n	70c <spi_write_buffer_wait+0x38>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     700:	6823      	ldr	r3, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     702:	7e18      	ldrb	r0, [r3, #24]
     704:	0782      	lsls	r2, r0, #30
     706:	d501      	bpl.n	70c <spi_write_buffer_wait+0x38>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     708:	2002      	movs	r0, #2
     70a:	7618      	strb	r0, [r3, #24]
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
     70c:	4655      	mov	r5, sl
     70e:	2000      	movs	r0, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     710:	2301      	movs	r3, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     712:	2602      	movs	r6, #2
     714:	46b4      	mov	ip, r6
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     716:	2704      	movs	r7, #4
     718:	46bb      	mov	fp, r7
     71a:	e08f      	b.n	83c <spi_write_buffer_wait+0x168>

	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     71c:	7962      	ldrb	r2, [r4, #5]
     71e:	2a00      	cmp	r2, #0
     720:	d001      	beq.n	726 <spi_write_buffer_wait+0x52>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     722:	6826      	ldr	r6, [r4, #0]
     724:	e016      	b.n	754 <spi_write_buffer_wait+0x80>
     726:	6822      	ldr	r2, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     728:	7e16      	ldrb	r6, [r2, #24]
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_write(module)) {
     72a:	421e      	tst	r6, r3
     72c:	d106      	bne.n	73c <spi_write_buffer_wait+0x68>
     72e:	4e6d      	ldr	r6, [pc, #436]	; (8e4 <spi_write_buffer_wait+0x210>)
     730:	7e17      	ldrb	r7, [r2, #24]
     732:	421f      	tst	r7, r3
     734:	d102      	bne.n	73c <spi_write_buffer_wait+0x68>
     736:	3e01      	subs	r6, #1
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     738:	2e00      	cmp	r6, #0
     73a:	d1f9      	bne.n	730 <spi_write_buffer_wait+0x5c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     73c:	7e16      	ldrb	r6, [r2, #24]
				if (spi_is_ready_to_write(module)) {
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     73e:	4667      	mov	r7, ip
     740:	423e      	tst	r6, r7
     742:	d003      	beq.n	74c <spi_write_buffer_wait+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     744:	2302      	movs	r3, #2
     746:	7613      	strb	r3, [r2, #24]
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
     748:	2004      	movs	r0, #4
     74a:	e0c4      	b.n	8d6 <spi_write_buffer_wait+0x202>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     74c:	7e12      	ldrb	r2, [r2, #24]
			}

			if (!spi_is_ready_to_write(module)) {
     74e:	421a      	tst	r2, r3
     750:	d1e7      	bne.n	722 <spi_write_buffer_wait+0x4e>
     752:	e0b3      	b.n	8bc <spi_write_buffer_wait+0x1e8>
     754:	7e32      	ldrb	r2, [r6, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
     756:	421a      	tst	r2, r3
     758:	d0fc      	beq.n	754 <spi_write_buffer_wait+0x80>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     75a:	1c42      	adds	r2, r0, #1
     75c:	b292      	uxth	r2, r2
     75e:	4690      	mov	r8, r2
     760:	5c0f      	ldrb	r7, [r1, r0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     762:	79a2      	ldrb	r2, [r4, #6]
     764:	2a01      	cmp	r2, #1
     766:	d001      	beq.n	76c <spi_write_buffer_wait+0x98>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     768:	4640      	mov	r0, r8
     76a:	e005      	b.n	778 <spi_write_buffer_wait+0xa4>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     76c:	3002      	adds	r0, #2
     76e:	b280      	uxth	r0, r0
     770:	4642      	mov	r2, r8
     772:	5c8a      	ldrb	r2, [r1, r2]
     774:	0212      	lsls	r2, r2, #8
     776:	4317      	orrs	r7, r2
     778:	7e32      	ldrb	r2, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     77a:	421a      	tst	r2, r3
     77c:	d002      	beq.n	784 <spi_write_buffer_wait+0xb0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     77e:	05ff      	lsls	r7, r7, #23
     780:	0dff      	lsrs	r7, r7, #23
     782:	62b7      	str	r7, [r6, #40]	; 0x28
     784:	1e6a      	subs	r2, r5, #1
     786:	b296      	uxth	r6, r2
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     788:	79e2      	ldrb	r2, [r4, #7]
     78a:	2a00      	cmp	r2, #0
     78c:	d101      	bne.n	792 <spi_write_buffer_wait+0xbe>
     78e:	1c35      	adds	r5, r6, #0
     790:	e056      	b.n	840 <spi_write_buffer_wait+0x16c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
     792:	7962      	ldrb	r2, [r4, #5]
     794:	2a00      	cmp	r2, #0
     796:	d137      	bne.n	808 <spi_write_buffer_wait+0x134>
     798:	4a53      	ldr	r2, [pc, #332]	; (8e8 <spi_write_buffer_wait+0x214>)
     79a:	9101      	str	r1, [sp, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     79c:	6826      	ldr	r6, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     79e:	7e37      	ldrb	r7, [r6, #24]
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
     7a0:	421f      	tst	r7, r3
     7a2:	d01c      	beq.n	7de <spi_write_buffer_wait+0x10a>
						data_to_send = tx_data[tx_pos++];
     7a4:	1c47      	adds	r7, r0, #1
     7a6:	b2bf      	uxth	r7, r7
     7a8:	46b9      	mov	r9, r7
     7aa:	9901      	ldr	r1, [sp, #4]
     7ac:	5c09      	ldrb	r1, [r1, r0]
     7ae:	4688      	mov	r8, r1
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     7b0:	79a7      	ldrb	r7, [r4, #6]
     7b2:	2f01      	cmp	r7, #1
     7b4:	d001      	beq.n	7ba <spi_write_buffer_wait+0xe6>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_write(module)) {
						data_to_send = tx_data[tx_pos++];
     7b6:	4648      	mov	r0, r9
     7b8:	e008      	b.n	7cc <spi_write_buffer_wait+0xf8>
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
							data_to_send |= (tx_data[tx_pos++] << 8);
     7ba:	3002      	adds	r0, #2
     7bc:	b280      	uxth	r0, r0
     7be:	9901      	ldr	r1, [sp, #4]
     7c0:	464f      	mov	r7, r9
     7c2:	5dc9      	ldrb	r1, [r1, r7]
     7c4:	0209      	lsls	r1, r1, #8
     7c6:	4647      	mov	r7, r8
     7c8:	430f      	orrs	r7, r1
     7ca:	46b8      	mov	r8, r7
     7cc:	7e37      	ldrb	r7, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     7ce:	421f      	tst	r7, r3
     7d0:	d003      	beq.n	7da <spi_write_buffer_wait+0x106>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     7d2:	4647      	mov	r7, r8
     7d4:	05f9      	lsls	r1, r7, #23
     7d6:	0dcf      	lsrs	r7, r1, #23
     7d8:	62b7      	str	r7, [r6, #40]	; 0x28
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
						length--;
     7da:	3d01      	subs	r5, #1
     7dc:	b2ad      	uxth	r5, r5
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7de:	6826      	ldr	r6, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     7e0:	7e37      	ldrb	r7, [r6, #24]
					}
					if (spi_is_ready_to_read(module)) {
     7e2:	4659      	mov	r1, fp
     7e4:	420f      	tst	r7, r1
     7e6:	d102      	bne.n	7ee <spi_write_buffer_wait+0x11a>
     7e8:	3a01      	subs	r2, #1

		if (module->receiver_enabled) {
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     7ea:	2a00      	cmp	r2, #0
     7ec:	d1d6      	bne.n	79c <spi_write_buffer_wait+0xc8>
     7ee:	9901      	ldr	r1, [sp, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     7f0:	7e32      	ldrb	r2, [r6, #24]
						break;
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
     7f2:	4667      	mov	r7, ip
     7f4:	423a      	tst	r2, r7
     7f6:	d003      	beq.n	800 <spi_write_buffer_wait+0x12c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     7f8:	2302      	movs	r3, #2
     7fa:	7633      	strb	r3, [r6, #24]
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
					_spi_clear_tx_complete_flag(module);
					return STATUS_ABORTED;
     7fc:	2004      	movs	r0, #4
     7fe:	e06a      	b.n	8d6 <spi_write_buffer_wait+0x202>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     800:	7e32      	ldrb	r2, [r6, #24]
				}

				if (!spi_is_ready_to_read(module)) {
     802:	465e      	mov	r6, fp
     804:	4232      	tst	r2, r6
     806:	d05b      	beq.n	8c0 <spi_write_buffer_wait+0x1ec>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     808:	6826      	ldr	r6, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     80a:	7e32      	ldrb	r2, [r6, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     80c:	465f      	mov	r7, fp
     80e:	423a      	tst	r2, r7
     810:	d0fb      	beq.n	80a <spi_write_buffer_wait+0x136>
     812:	7e32      	ldrb	r2, [r6, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     814:	423a      	tst	r2, r7
     816:	d00d      	beq.n	834 <spi_write_buffer_wait+0x160>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     818:	8b72      	ldrh	r2, [r6, #26]
     81a:	423a      	tst	r2, r7
     81c:	d004      	beq.n	828 <spi_write_buffer_wait+0x154>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     81e:	8b72      	ldrh	r2, [r6, #26]
     820:	2704      	movs	r7, #4
     822:	433a      	orrs	r2, r7
     824:	b292      	uxth	r2, r2
     826:	8372      	strh	r2, [r6, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     828:	79a2      	ldrb	r2, [r4, #6]
     82a:	2a01      	cmp	r2, #1
     82c:	d101      	bne.n	832 <spi_write_buffer_wait+0x15e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     82e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     830:	e000      	b.n	834 <spi_write_buffer_wait+0x160>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     832:	6ab2      	ldr	r2, [r6, #40]	; 0x28
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
			flush_length--;
     834:	4652      	mov	r2, sl
     836:	3a01      	subs	r2, #1
     838:	b292      	uxth	r2, r2
     83a:	4692      	mov	sl, r2
     83c:	3d01      	subs	r5, #1
     83e:	b2ad      	uxth	r5, r5

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
     840:	4a2a      	ldr	r2, [pc, #168]	; (8ec <spi_write_buffer_wait+0x218>)
     842:	4295      	cmp	r5, r2
     844:	d000      	beq.n	848 <spi_write_buffer_wait+0x174>
     846:	e769      	b.n	71c <spi_write_buffer_wait+0x48>
     848:	4651      	mov	r1, sl
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     84a:	7963      	ldrb	r3, [r4, #5]
     84c:	2b01      	cmp	r3, #1
     84e:	d105      	bne.n	85c <spi_write_buffer_wait+0x188>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     850:	6821      	ldr	r1, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     852:	2202      	movs	r2, #2
     854:	7e0b      	ldrb	r3, [r1, #24]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
     856:	4213      	tst	r3, r2
     858:	d0fc      	beq.n	854 <spi_write_buffer_wait+0x180>
     85a:	e033      	b.n	8c4 <spi_write_buffer_wait+0x1f0>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     85c:	2b00      	cmp	r3, #0
     85e:	d133      	bne.n	8c8 <spi_write_buffer_wait+0x1f4>
		if (module->receiver_enabled) {
     860:	79e3      	ldrb	r3, [r4, #7]
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     862:	2000      	movs	r0, #0
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
     864:	2b00      	cmp	r3, #0
     866:	d036      	beq.n	8d6 <spi_write_buffer_wait+0x202>
			while (flush_length) {
     868:	2900      	cmp	r1, #0
     86a:	d02f      	beq.n	8cc <spi_write_buffer_wait+0x1f8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     86c:	2504      	movs	r5, #4
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
     86e:	4e1d      	ldr	r6, [pc, #116]	; (8e4 <spi_write_buffer_wait+0x210>)

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     870:	2704      	movs	r7, #4
     872:	4650      	mov	r0, sl
     874:	e01c      	b.n	8b0 <spi_write_buffer_wait+0x1dc>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     876:	7e0a      	ldrb	r2, [r1, #24]
     878:	422a      	tst	r2, r5
     87a:	d102      	bne.n	882 <spi_write_buffer_wait+0x1ae>
     87c:	3b01      	subs	r3, #1
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     87e:	2b00      	cmp	r3, #0
     880:	d1f9      	bne.n	876 <spi_write_buffer_wait+0x1a2>
     882:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
     884:	422b      	tst	r3, r5
     886:	d023      	beq.n	8d0 <spi_write_buffer_wait+0x1fc>
     888:	7e0b      	ldrb	r3, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     88a:	422b      	tst	r3, r5
     88c:	d00c      	beq.n	8a8 <spi_write_buffer_wait+0x1d4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     88e:	8b4b      	ldrh	r3, [r1, #26]
     890:	422b      	tst	r3, r5
     892:	d003      	beq.n	89c <spi_write_buffer_wait+0x1c8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     894:	8b4b      	ldrh	r3, [r1, #26]
     896:	433b      	orrs	r3, r7
     898:	b29b      	uxth	r3, r3
     89a:	834b      	strh	r3, [r1, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     89c:	79a3      	ldrb	r3, [r4, #6]
     89e:	2b01      	cmp	r3, #1
     8a0:	d101      	bne.n	8a6 <spi_write_buffer_wait+0x1d2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     8a2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     8a4:	e000      	b.n	8a8 <spi_write_buffer_wait+0x1d4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     8a6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
					return STATUS_ERR_TIMEOUT;
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
				flush_length--;
     8a8:	3801      	subs	r0, #1
     8aa:	b280      	uxth	r0, r0
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
     8ac:	2800      	cmp	r0, #0
     8ae:	d011      	beq.n	8d4 <spi_write_buffer_wait+0x200>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8b0:	6821      	ldr	r1, [r4, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     8b2:	7e0b      	ldrb	r3, [r1, #24]
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
					if (spi_is_ready_to_read(module)) {
     8b4:	422b      	tst	r3, r5
     8b6:	d1e4      	bne.n	882 <spi_write_buffer_wait+0x1ae>
     8b8:	1c33      	adds	r3, r6, #0
     8ba:	e7dc      	b.n	876 <spi_write_buffer_wait+0x1a2>
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_write(module)) {
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
     8bc:	2012      	movs	r0, #18
     8be:	e00a      	b.n	8d6 <spi_write_buffer_wait+0x202>
					return STATUS_ABORTED;
				}

				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
     8c0:	2012      	movs	r0, #18
     8c2:	e008      	b.n	8d6 <spi_write_buffer_wait+0x202>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     8c4:	2000      	movs	r0, #0
     8c6:	e006      	b.n	8d6 <spi_write_buffer_wait+0x202>
     8c8:	2000      	movs	r0, #0
     8ca:	e004      	b.n	8d6 <spi_write_buffer_wait+0x202>
     8cc:	2000      	movs	r0, #0
     8ce:	e002      	b.n	8d6 <spi_write_buffer_wait+0x202>
						break;
					}
				}
				if (!spi_is_ready_to_read(module)) {
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
     8d0:	2012      	movs	r0, #18
     8d2:	e000      	b.n	8d6 <spi_write_buffer_wait+0x202>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     8d4:	2000      	movs	r0, #0
}
     8d6:	b003      	add	sp, #12
     8d8:	bc3c      	pop	{r2, r3, r4, r5}
     8da:	4690      	mov	r8, r2
     8dc:	4699      	mov	r9, r3
     8de:	46a2      	mov	sl, r4
     8e0:	46ab      	mov	fp, r5
     8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8e4:	00002710 	.word	0x00002710
     8e8:	00002711 	.word	0x00002711
     8ec:	0000ffff 	.word	0x0000ffff

000008f0 <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     8f0:	1c93      	adds	r3, r2, #2
     8f2:	009b      	lsls	r3, r3, #2
     8f4:	18c3      	adds	r3, r0, r3
     8f6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
     8f8:	2301      	movs	r3, #1
     8fa:	4093      	lsls	r3, r2
     8fc:	1c1a      	adds	r2, r3, #0
     8fe:	2336      	movs	r3, #54	; 0x36
     900:	5cc1      	ldrb	r1, [r0, r3]
     902:	430a      	orrs	r2, r1
     904:	54c2      	strb	r2, [r0, r3]
}
     906:	4770      	bx	lr

00000908 <spi_read_buffer_job>:
enum status_code spi_read_buffer_job(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     908:	b530      	push	{r4, r5, lr}
     90a:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     90c:	2017      	movs	r0, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
     90e:	2a00      	cmp	r2, #0
     910:	d024      	beq.n	95c <spi_read_buffer_job+0x54>
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     912:	79e5      	ldrb	r5, [r4, #7]
		return STATUS_ERR_DENIED;
     914:	201c      	movs	r0, #28

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     916:	2d00      	cmp	r5, #0
     918:	d020      	beq.n	95c <spi_read_buffer_job+0x54>
		return STATUS_ERR_DENIED;
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
     91a:	2038      	movs	r0, #56	; 0x38
     91c:	5c20      	ldrb	r0, [r4, r0]
     91e:	b2c0      	uxtb	r0, r0
     920:	2805      	cmp	r0, #5
     922:	d01b      	beq.n	95c <spi_read_buffer_job+0x54>
		return STATUS_BUSY;
	}

	dummy_write = dummy;
     924:	480e      	ldr	r0, [pc, #56]	; (960 <spi_read_buffer_job+0x58>)
     926:	8003      	strh	r3, [r0, #0]

	uint8_t tmp_intenset = 0;

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
     928:	8622      	strh	r2, [r4, #48]	; 0x30
	module->remaining_dummy_buffer_length = length;
     92a:	8662      	strh	r2, [r4, #50]	; 0x32
	module->rx_buffer_ptr = rx_data;
     92c:	62a1      	str	r1, [r4, #40]	; 0x28
	module->status = STATUS_BUSY;
     92e:	2205      	movs	r2, #5
     930:	2338      	movs	r3, #56	; 0x38
     932:	54e2      	strb	r2, [r4, r3]

	module->dir = SPI_DIRECTION_READ;
     934:	2300      	movs	r3, #0
     936:	7263      	strb	r3, [r4, #9]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
     938:	6822      	ldr	r2, [r4, #0]

	/* Enable the RX Complete Interrupt */
	tmp_intenset = SPI_INTERRUPT_FLAG_RX_COMPLETE;

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER && module->dir == SPI_DIRECTION_READ) {
     93a:	7963      	ldrb	r3, [r4, #5]
     93c:	2b01      	cmp	r3, #1
     93e:	d104      	bne.n	94a <spi_read_buffer_job+0x42>
     940:	7a63      	ldrb	r3, [r4, #9]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);

	/* Enable the RX Complete Interrupt */
	tmp_intenset = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     942:	4259      	negs	r1, r3
     944:	414b      	adcs	r3, r1
     946:	3304      	adds	r3, #4
     948:	e006      	b.n	958 <spi_read_buffer_job+0x50>
		/* Enable Data Register Empty interrupt for master */
		tmp_intenset |= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
	}
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     94a:	2b00      	cmp	r3, #0
     94c:	d103      	bne.n	956 <spi_read_buffer_job+0x4e>
		/* Clear TXC flag if set */
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     94e:	2302      	movs	r3, #2
     950:	7613      	strb	r3, [r2, #24]
		/* Enable transmit complete interrupt for slave */
		tmp_intenset |= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     952:	2306      	movs	r3, #6
     954:	e000      	b.n	958 <spi_read_buffer_job+0x50>

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);

	/* Enable the RX Complete Interrupt */
	tmp_intenset = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     956:	2304      	movs	r3, #4
		tmp_intenset |= SPI_INTERRUPT_FLAG_TX_COMPLETE;
	}
#  endif

	/* Enable all interrupts simultaneously */
	hw->INTENSET.reg = tmp_intenset;
     958:	7593      	strb	r3, [r2, #22]
	}

	dummy_write = dummy;
	/* Issue internal read */
	_spi_read_buffer(module, rx_data, length);
	return STATUS_OK;
     95a:	2000      	movs	r0, #0
}
     95c:	bd30      	pop	{r4, r5, pc}
     95e:	46c0      	nop			; (mov r8, r8)
     960:	200000c8 	.word	0x200000c8

00000964 <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     964:	b530      	push	{r4, r5, lr}
     966:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     968:	2017      	movs	r0, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
     96a:	2b00      	cmp	r3, #0
     96c:	d01a      	beq.n	9a4 <spi_transceive_buffer_job+0x40>
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     96e:	79e5      	ldrb	r5, [r4, #7]
		return STATUS_ERR_DENIED;
     970:	201c      	movs	r0, #28

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
     972:	2d00      	cmp	r5, #0
     974:	d016      	beq.n	9a4 <spi_transceive_buffer_job+0x40>
		return STATUS_ERR_DENIED;
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
     976:	2038      	movs	r0, #56	; 0x38
     978:	5c20      	ldrb	r0, [r4, r0]
     97a:	b2c0      	uxtb	r0, r0
     97c:	2805      	cmp	r0, #5
     97e:	d011      	beq.n	9a4 <spi_transceive_buffer_job+0x40>
{
	Assert(module);
	Assert(tx_data);

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
     980:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
     982:	8623      	strh	r3, [r4, #48]	; 0x30
	module->rx_buffer_ptr = rx_data;
     984:	62a2      	str	r2, [r4, #40]	; 0x28
	module->tx_buffer_ptr = tx_data;
     986:	62e1      	str	r1, [r4, #44]	; 0x2c
	module->status = STATUS_BUSY;
     988:	2205      	movs	r2, #5
     98a:	2338      	movs	r3, #56	; 0x38
     98c:	54e2      	strb	r2, [r4, r3]

	module->dir = SPI_DIRECTION_BOTH;
     98e:	2302      	movs	r3, #2
     990:	7263      	strb	r3, [r4, #9]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
     992:	6823      	ldr	r3, [r4, #0]

	/* Enable the Data Register Empty and RX Complete Interrupt */
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
     994:	759a      	strb	r2, [r3, #22]
			SPI_INTERRUPT_FLAG_RX_COMPLETE);

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     996:	7962      	ldrb	r2, [r4, #5]
	}

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);

	return STATUS_OK;
     998:	2000      	movs	r0, #0
	/* Enable the Data Register Empty and RX Complete Interrupt */
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
			SPI_INTERRUPT_FLAG_RX_COMPLETE);

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     99a:	2a00      	cmp	r2, #0
     99c:	d102      	bne.n	9a4 <spi_transceive_buffer_job+0x40>
		/* Clear TXC flag if set */
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     99e:	2202      	movs	r2, #2
     9a0:	761a      	strb	r2, [r3, #24]
		/* Enable transmit complete interrupt for slave */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     9a2:	759a      	strb	r2, [r3, #22]

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);

	return STATUS_OK;
}
     9a4:	bd30      	pop	{r4, r5, pc}
     9a6:	46c0      	nop			; (mov r8, r8)

000009a8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     9aa:	0080      	lsls	r0, r0, #2
     9ac:	4b74      	ldr	r3, [pc, #464]	; (b80 <_spi_interrupt_handler+0x1d8>)
     9ae:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     9b0:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     9b2:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     9b4:	5ce3      	ldrb	r3, [r4, r3]
     9b6:	2237      	movs	r2, #55	; 0x37
     9b8:	5ca7      	ldrb	r7, [r4, r2]
     9ba:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     9bc:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     9be:	7dae      	ldrb	r6, [r5, #22]
     9c0:	401e      	ands	r6, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     9c2:	07f1      	lsls	r1, r6, #31
     9c4:	d549      	bpl.n	a5a <_spi_interrupt_handler+0xb2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     9c6:	7963      	ldrb	r3, [r4, #5]
     9c8:	2b01      	cmp	r3, #1
     9ca:	d116      	bne.n	9fa <_spi_interrupt_handler+0x52>
			(module->dir == SPI_DIRECTION_READ)) {
     9cc:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     9ce:	2b00      	cmp	r3, #0
     9d0:	d10f      	bne.n	9f2 <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
     9d2:	4b6c      	ldr	r3, [pc, #432]	; (b84 <_spi_interrupt_handler+0x1dc>)
     9d4:	881b      	ldrh	r3, [r3, #0]
     9d6:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     9d8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     9da:	3b01      	subs	r3, #1
     9dc:	b29b      	uxth	r3, r3
     9de:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
     9e0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     9e2:	b29b      	uxth	r3, r3
     9e4:	2b00      	cmp	r3, #0
     9e6:	d101      	bne.n	9ec <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     9e8:	2301      	movs	r3, #1
     9ea:	752b      	strb	r3, [r5, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     9ec:	7963      	ldrb	r3, [r4, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
     9ee:	2b01      	cmp	r3, #1
     9f0:	d103      	bne.n	9fa <_spi_interrupt_handler+0x52>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
     9f2:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     9f4:	2b00      	cmp	r3, #0
     9f6:	d105      	bne.n	a04 <_spi_interrupt_handler+0x5c>
     9f8:	e02f      	b.n	a5a <_spi_interrupt_handler+0xb2>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     9fa:	2b00      	cmp	r3, #0
     9fc:	d12d      	bne.n	a5a <_spi_interrupt_handler+0xb2>
			(module->dir != SPI_DIRECTION_READ))
     9fe:	7a63      	ldrb	r3, [r4, #9]
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     a00:	2b00      	cmp	r3, #0
     a02:	d02a      	beq.n	a5a <_spi_interrupt_handler+0xb2>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     a04:	6822      	ldr	r2, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     a06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a08:	7819      	ldrb	r1, [r3, #0]
     a0a:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     a0c:	1c58      	adds	r0, r3, #1
     a0e:	62e0      	str	r0, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a10:	79a0      	ldrb	r0, [r4, #6]
     a12:	2801      	cmp	r0, #1
     a14:	d104      	bne.n	a20 <_spi_interrupt_handler+0x78>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     a16:	7858      	ldrb	r0, [r3, #1]
     a18:	0200      	lsls	r0, r0, #8
     a1a:	4301      	orrs	r1, r0
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
     a1c:	3302      	adds	r3, #2
     a1e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     a20:	05cb      	lsls	r3, r1, #23
     a22:	0ddb      	lsrs	r3, r3, #23
     a24:	6293      	str	r3, [r2, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     a26:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     a28:	3b01      	subs	r3, #1
     a2a:	b29b      	uxth	r3, r3
     a2c:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     a2e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     a30:	b29b      	uxth	r3, r3
     a32:	2b00      	cmp	r3, #0
     a34:	d111      	bne.n	a5a <_spi_interrupt_handler+0xb2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     a36:	2301      	movs	r3, #1
     a38:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     a3a:	7a63      	ldrb	r3, [r4, #9]
     a3c:	2b01      	cmp	r3, #1
     a3e:	d10c      	bne.n	a5a <_spi_interrupt_handler+0xb2>
     a40:	79e3      	ldrb	r3, [r4, #7]
     a42:	2b00      	cmp	r3, #0
     a44:	d109      	bne.n	a5a <_spi_interrupt_handler+0xb2>
						!(module->receiver_enabled)) {
					/* Buffer sent with receiver disabled */
					module->dir = SPI_DIRECTION_IDLE;
     a46:	2303      	movs	r3, #3
     a48:	7263      	strb	r3, [r4, #9]
					module->status = STATUS_OK;
     a4a:	2200      	movs	r2, #0
     a4c:	2338      	movs	r3, #56	; 0x38
     a4e:	54e2      	strb	r2, [r4, r3]
					/* Run callback if registered and enabled */
					if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     a50:	07fa      	lsls	r2, r7, #31
     a52:	d502      	bpl.n	a5a <_spi_interrupt_handler+0xb2>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
									(module);
     a54:	1c20      	adds	r0, r4, #0
     a56:	68e3      	ldr	r3, [r4, #12]
     a58:	4798      	blx	r3
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     a5a:	0771      	lsls	r1, r6, #29
     a5c:	d561      	bpl.n	b22 <_spi_interrupt_handler+0x17a>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     a5e:	8b6b      	ldrh	r3, [r5, #26]
     a60:	075a      	lsls	r2, r3, #29
     a62:	d514      	bpl.n	a8e <_spi_interrupt_handler+0xe6>
			if (module->dir != SPI_DIRECTION_WRITE) {
     a64:	7a63      	ldrb	r3, [r4, #9]
     a66:	2b01      	cmp	r3, #1
     a68:	d00b      	beq.n	a82 <_spi_interrupt_handler+0xda>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     a6a:	221e      	movs	r2, #30
     a6c:	2338      	movs	r3, #56	; 0x38
     a6e:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     a70:	2303      	movs	r3, #3
     a72:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     a74:	2305      	movs	r3, #5
     a76:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     a78:	073b      	lsls	r3, r7, #28
     a7a:	d502      	bpl.n	a82 <_spi_interrupt_handler+0xda>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     a7c:	1c20      	adds	r0, r4, #0
     a7e:	69a1      	ldr	r1, [r4, #24]
     a80:	4788      	blx	r1
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     a82:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     a84:	8b6a      	ldrh	r2, [r5, #26]
     a86:	2304      	movs	r3, #4
     a88:	4313      	orrs	r3, r2
     a8a:	836b      	strh	r3, [r5, #26]
     a8c:	e049      	b.n	b22 <_spi_interrupt_handler+0x17a>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
     a8e:	7a63      	ldrb	r3, [r4, #9]
     a90:	2b01      	cmp	r3, #1
     a92:	d116      	bne.n	ac2 <_spi_interrupt_handler+0x11a>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     a94:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
     a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     a98:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     a9a:	3b01      	subs	r3, #1
     a9c:	b29b      	uxth	r3, r3
     a9e:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
     aa0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     aa2:	b29b      	uxth	r3, r3
     aa4:	2b00      	cmp	r3, #0
     aa6:	d13c      	bne.n	b22 <_spi_interrupt_handler+0x17a>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     aa8:	2304      	movs	r3, #4
     aaa:	752b      	strb	r3, [r5, #20]
					module->status = STATUS_OK;
     aac:	2200      	movs	r2, #0
     aae:	2338      	movs	r3, #56	; 0x38
     ab0:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     ab2:	2303      	movs	r3, #3
     ab4:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
     ab6:	07fa      	lsls	r2, r7, #31
     ab8:	d533      	bpl.n	b22 <_spi_interrupt_handler+0x17a>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     aba:	1c20      	adds	r0, r4, #0
     abc:	68e3      	ldr	r3, [r4, #12]
     abe:	4798      	blx	r3
     ac0:	e02f      	b.n	b22 <_spi_interrupt_handler+0x17a>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     ac2:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     ac6:	05d2      	lsls	r2, r2, #23
     ac8:	0dd2      	lsrs	r2, r2, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
     aca:	b2d3      	uxtb	r3, r2
     acc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     ace:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
     ad0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ad2:	1c59      	adds	r1, r3, #1
     ad4:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ad6:	79a1      	ldrb	r1, [r4, #6]
     ad8:	2901      	cmp	r1, #1
     ada:	d104      	bne.n	ae6 <_spi_interrupt_handler+0x13e>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
     adc:	0a12      	lsrs	r2, r2, #8
     ade:	705a      	strb	r2, [r3, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
     ae0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ae2:	3301      	adds	r3, #1
     ae4:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
     ae6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     ae8:	3b01      	subs	r3, #1
     aea:	b29b      	uxth	r3, r3
     aec:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
     aee:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     af0:	b29b      	uxth	r3, r3
     af2:	2b00      	cmp	r3, #0
     af4:	d115      	bne.n	b22 <_spi_interrupt_handler+0x17a>
					module->status = STATUS_OK;
     af6:	2200      	movs	r2, #0
     af8:	2338      	movs	r3, #56	; 0x38
     afa:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     afc:	2304      	movs	r3, #4
     afe:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     b00:	7a63      	ldrb	r3, [r4, #9]
     b02:	2b02      	cmp	r3, #2
     b04:	d105      	bne.n	b12 <_spi_interrupt_handler+0x16a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     b06:	077a      	lsls	r2, r7, #29
     b08:	d50b      	bpl.n	b22 <_spi_interrupt_handler+0x17a>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     b0a:	1c20      	adds	r0, r4, #0
     b0c:	6963      	ldr	r3, [r4, #20]
     b0e:	4798      	blx	r3
     b10:	e007      	b.n	b22 <_spi_interrupt_handler+0x17a>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
     b12:	7a63      	ldrb	r3, [r4, #9]
     b14:	2b00      	cmp	r3, #0
     b16:	d104      	bne.n	b22 <_spi_interrupt_handler+0x17a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     b18:	07b9      	lsls	r1, r7, #30
     b1a:	d502      	bpl.n	b22 <_spi_interrupt_handler+0x17a>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     b1c:	1c20      	adds	r0, r4, #0
     b1e:	6922      	ldr	r2, [r4, #16]
     b20:	4790      	blx	r2
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     b22:	07b3      	lsls	r3, r6, #30
     b24:	d513      	bpl.n	b4e <_spi_interrupt_handler+0x1a6>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     b26:	7963      	ldrb	r3, [r4, #5]
     b28:	2b00      	cmp	r3, #0
     b2a:	d110      	bne.n	b4e <_spi_interrupt_handler+0x1a6>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     b2c:	2307      	movs	r3, #7
     b2e:	752b      	strb	r3, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     b30:	2302      	movs	r3, #2
     b32:	762b      	strb	r3, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     b34:	2303      	movs	r3, #3
     b36:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
     b38:	2300      	movs	r3, #0
     b3a:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     b3c:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     b3e:	2338      	movs	r3, #56	; 0x38
     b40:	2200      	movs	r2, #0
     b42:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
     b44:	06f9      	lsls	r1, r7, #27
     b46:	d502      	bpl.n	b4e <_spi_interrupt_handler+0x1a6>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
					(module);
     b48:	1c20      	adds	r0, r4, #0
     b4a:	69e2      	ldr	r2, [r4, #28]
     b4c:	4790      	blx	r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     b4e:	0733      	lsls	r3, r6, #28
     b50:	d50a      	bpl.n	b68 <_spi_interrupt_handler+0x1c0>
			if (module->mode == SPI_MODE_SLAVE) {
     b52:	7963      	ldrb	r3, [r4, #5]
     b54:	2b00      	cmp	r3, #0
     b56:	d107      	bne.n	b68 <_spi_interrupt_handler+0x1c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     b58:	2308      	movs	r3, #8
     b5a:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     b5c:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     b5e:	06b9      	lsls	r1, r7, #26
     b60:	d502      	bpl.n	b68 <_spi_interrupt_handler+0x1c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     b62:	1c20      	adds	r0, r4, #0
     b64:	6a22      	ldr	r2, [r4, #32]
     b66:	4790      	blx	r2
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     b68:	09f6      	lsrs	r6, r6, #7
     b6a:	d007      	beq.n	b7c <_spi_interrupt_handler+0x1d4>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     b6c:	2380      	movs	r3, #128	; 0x80
     b6e:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     b70:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     b72:	067b      	lsls	r3, r7, #25
     b74:	d502      	bpl.n	b7c <_spi_interrupt_handler+0x1d4>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
     b78:	1c20      	adds	r0, r4, #0
     b7a:	4798      	blx	r3
		}
	}
#  endif
}
     b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	200000cc 	.word	0x200000cc
     b84:	200000c8 	.word	0x200000c8

00000b88 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     b88:	4770      	bx	lr
     b8a:	46c0      	nop			; (mov r8, r8)

00000b8c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     b8c:	b530      	push	{r4, r5, lr}
     b8e:	b083      	sub	sp, #12
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     b90:	466b      	mov	r3, sp
     b92:	4a08      	ldr	r2, [pc, #32]	; (bb4 <_sercom_get_sercom_inst_index+0x28>)
     b94:	ca30      	ldmia	r2!, {r4, r5}
     b96:	c330      	stmia	r3!, {r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     b98:	1c03      	adds	r3, r0, #0
     b9a:	9a00      	ldr	r2, [sp, #0]
     b9c:	4282      	cmp	r2, r0
     b9e:	d005      	beq.n	bac <_sercom_get_sercom_inst_index+0x20>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     ba0:	2000      	movs	r0, #0
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     ba2:	9c01      	ldr	r4, [sp, #4]
     ba4:	429c      	cmp	r4, r3
     ba6:	d103      	bne.n	bb0 <_sercom_get_sercom_inst_index+0x24>
     ba8:	2001      	movs	r0, #1
     baa:	e000      	b.n	bae <_sercom_get_sercom_inst_index+0x22>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     bac:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     bae:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     bb0:	b003      	add	sp, #12
     bb2:	bd30      	pop	{r4, r5, pc}
     bb4:	00001d60 	.word	0x00001d60

00000bb8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     bb8:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     bba:	4b09      	ldr	r3, [pc, #36]	; (be0 <_sercom_set_handler+0x28>)
     bbc:	781b      	ldrb	r3, [r3, #0]
     bbe:	2b00      	cmp	r3, #0
     bc0:	d109      	bne.n	bd6 <_sercom_set_handler+0x1e>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     bc2:	4b07      	ldr	r3, [pc, #28]	; (be0 <_sercom_set_handler+0x28>)
     bc4:	4d07      	ldr	r5, [pc, #28]	; (be4 <_sercom_set_handler+0x2c>)
     bc6:	605d      	str	r5, [r3, #4]
			_sercom_instances[i] = NULL;
     bc8:	4a07      	ldr	r2, [pc, #28]	; (be8 <_sercom_set_handler+0x30>)
     bca:	2400      	movs	r4, #0
     bcc:	6014      	str	r4, [r2, #0]
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     bce:	609d      	str	r5, [r3, #8]
			_sercom_instances[i] = NULL;
     bd0:	6054      	str	r4, [r2, #4]
		}

		_handler_table_initialized = true;
     bd2:	2201      	movs	r2, #1
     bd4:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     bd6:	0080      	lsls	r0, r0, #2
     bd8:	4b01      	ldr	r3, [pc, #4]	; (be0 <_sercom_set_handler+0x28>)
     bda:	1818      	adds	r0, r3, r0
     bdc:	6041      	str	r1, [r0, #4]
}
     bde:	bd30      	pop	{r4, r5, pc}
     be0:	20000038 	.word	0x20000038
     be4:	00000b89 	.word	0x00000b89
     be8:	200000cc 	.word	0x200000cc

00000bec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     bec:	b530      	push	{r4, r5, lr}
     bee:	b083      	sub	sp, #12
     bf0:	1c05      	adds	r5, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     bf2:	ac01      	add	r4, sp, #4
     bf4:	1c20      	adds	r0, r4, #0
     bf6:	4905      	ldr	r1, [pc, #20]	; (c0c <_sercom_get_interrupt_vector+0x20>)
     bf8:	3108      	adds	r1, #8
     bfa:	2202      	movs	r2, #2
     bfc:	4b04      	ldr	r3, [pc, #16]	; (c10 <_sercom_get_interrupt_vector+0x24>)
     bfe:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     c00:	1c28      	adds	r0, r5, #0
     c02:	4b04      	ldr	r3, [pc, #16]	; (c14 <_sercom_get_interrupt_vector+0x28>)
     c04:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     c06:	5620      	ldrsb	r0, [r4, r0]
}
     c08:	b003      	add	sp, #12
     c0a:	bd30      	pop	{r4, r5, pc}
     c0c:	00001d60 	.word	0x00001d60
     c10:	00001d4d 	.word	0x00001d4d
     c14:	00000b8d 	.word	0x00000b8d

00000c18 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     c18:	b508      	push	{r3, lr}
     c1a:	4b02      	ldr	r3, [pc, #8]	; (c24 <SERCOM0_Handler+0xc>)
     c1c:	685b      	ldr	r3, [r3, #4]
     c1e:	2000      	movs	r0, #0
     c20:	4798      	blx	r3
     c22:	bd08      	pop	{r3, pc}
     c24:	20000038 	.word	0x20000038

00000c28 <SERCOM1_Handler>:
     c28:	b508      	push	{r3, lr}
     c2a:	4b02      	ldr	r3, [pc, #8]	; (c34 <SERCOM1_Handler+0xc>)
     c2c:	689b      	ldr	r3, [r3, #8]
     c2e:	2001      	movs	r0, #1
     c30:	4798      	blx	r3
     c32:	bd08      	pop	{r3, pc}
     c34:	20000038 	.word	0x20000038

00000c38 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     c38:	2000      	movs	r0, #0
     c3a:	4770      	bx	lr

00000c3c <tcc_get_config_defaults>:
{
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);

	/* Base counter defaults */
	config->counter.count                  = 0;
     c3c:	2300      	movs	r3, #0
     c3e:	6003      	str	r3, [r0, #0]

	config->counter.period                 = _tcc_maxs[module_index];
     c40:	4a4c      	ldr	r2, [pc, #304]	; (d74 <tcc_get_config_defaults+0x138>)
     c42:	6042      	str	r2, [r0, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
     c44:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     c46:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     c48:	7303      	strb	r3, [r0, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     c4a:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
     c4c:	7203      	strb	r3, [r0, #8]

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     c4e:	61c3      	str	r3, [r0, #28]
     c50:	6203      	str	r3, [r0, #32]
     c52:	6243      	str	r3, [r0, #36]	; 0x24
     c54:	6283      	str	r3, [r0, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     c56:	7503      	strb	r3, [r0, #20]
     c58:	7543      	strb	r3, [r0, #21]
     c5a:	7583      	strb	r3, [r0, #22]
     c5c:	75c3      	strb	r3, [r0, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     c5e:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     c60:	7643      	strb	r3, [r0, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     c62:	7403      	strb	r3, [r0, #16]
     c64:	7443      	strb	r3, [r0, #17]
     c66:	7483      	strb	r3, [r0, #18]
     c68:	74c3      	strb	r3, [r0, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     c6a:	222c      	movs	r2, #44	; 0x2c
     c6c:	5483      	strb	r3, [r0, r2]
     c6e:	222d      	movs	r2, #45	; 0x2d
     c70:	5483      	strb	r3, [r0, r2]
     c72:	222e      	movs	r2, #46	; 0x2e
     c74:	5483      	strb	r3, [r0, r2]
     c76:	222f      	movs	r2, #47	; 0x2f
     c78:	5483      	strb	r3, [r0, r2]
     c7a:	2230      	movs	r2, #48	; 0x30
     c7c:	5483      	strb	r3, [r0, r2]
     c7e:	2231      	movs	r2, #49	; 0x31
     c80:	5483      	strb	r3, [r0, r2]
     c82:	2232      	movs	r2, #50	; 0x32
     c84:	5483      	strb	r3, [r0, r2]
     c86:	2233      	movs	r2, #51	; 0x33
     c88:	5483      	strb	r3, [r0, r2]
     c8a:	2234      	movs	r2, #52	; 0x34
     c8c:	5483      	strb	r3, [r0, r2]
     c8e:	2235      	movs	r2, #53	; 0x35
     c90:	5483      	strb	r3, [r0, r2]
     c92:	2236      	movs	r2, #54	; 0x36
     c94:	5483      	strb	r3, [r0, r2]
     c96:	2237      	movs	r2, #55	; 0x37
     c98:	5483      	strb	r3, [r0, r2]
     c9a:	2238      	movs	r2, #56	; 0x38
     c9c:	5483      	strb	r3, [r0, r2]
     c9e:	2239      	movs	r2, #57	; 0x39
     ca0:	5483      	strb	r3, [r0, r2]
     ca2:	223a      	movs	r2, #58	; 0x3a
     ca4:	5483      	strb	r3, [r0, r2]
     ca6:	223b      	movs	r2, #59	; 0x3b
     ca8:	5483      	strb	r3, [r0, r2]
     caa:	223c      	movs	r2, #60	; 0x3c
     cac:	5483      	strb	r3, [r0, r2]
     cae:	223d      	movs	r2, #61	; 0x3d
     cb0:	5483      	strb	r3, [r0, r2]
     cb2:	223e      	movs	r2, #62	; 0x3e
     cb4:	5483      	strb	r3, [r0, r2]
     cb6:	223f      	movs	r2, #63	; 0x3f
     cb8:	5483      	strb	r3, [r0, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     cba:	2240      	movs	r2, #64	; 0x40
     cbc:	5483      	strb	r3, [r0, r2]
     cbe:	2241      	movs	r2, #65	; 0x41
     cc0:	5483      	strb	r3, [r0, r2]
     cc2:	2242      	movs	r2, #66	; 0x42
     cc4:	5483      	strb	r3, [r0, r2]
     cc6:	2243      	movs	r2, #67	; 0x43
     cc8:	5483      	strb	r3, [r0, r2]
     cca:	2244      	movs	r2, #68	; 0x44
     ccc:	5483      	strb	r3, [r0, r2]
     cce:	2245      	movs	r2, #69	; 0x45
     cd0:	5483      	strb	r3, [r0, r2]
     cd2:	2246      	movs	r2, #70	; 0x46
     cd4:	5483      	strb	r3, [r0, r2]
     cd6:	2247      	movs	r2, #71	; 0x47
     cd8:	5483      	strb	r3, [r0, r2]
     cda:	2248      	movs	r2, #72	; 0x48
     cdc:	5483      	strb	r3, [r0, r2]
     cde:	2249      	movs	r2, #73	; 0x49
     ce0:	5483      	strb	r3, [r0, r2]
     ce2:	224a      	movs	r2, #74	; 0x4a
     ce4:	5483      	strb	r3, [r0, r2]
     ce6:	224b      	movs	r2, #75	; 0x4b
     ce8:	5483      	strb	r3, [r0, r2]
     cea:	224c      	movs	r2, #76	; 0x4c
     cec:	5483      	strb	r3, [r0, r2]
     cee:	224d      	movs	r2, #77	; 0x4d
     cf0:	5483      	strb	r3, [r0, r2]
     cf2:	224e      	movs	r2, #78	; 0x4e
     cf4:	5483      	strb	r3, [r0, r2]
     cf6:	224f      	movs	r2, #79	; 0x4f
     cf8:	5483      	strb	r3, [r0, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     cfa:	2250      	movs	r2, #80	; 0x50
     cfc:	5483      	strb	r3, [r0, r2]
     cfe:	2251      	movs	r2, #81	; 0x51
     d00:	5483      	strb	r3, [r0, r2]
     d02:	2252      	movs	r2, #82	; 0x52
     d04:	5483      	strb	r3, [r0, r2]
     d06:	2253      	movs	r2, #83	; 0x53
     d08:	5483      	strb	r3, [r0, r2]
     d0a:	2254      	movs	r2, #84	; 0x54
     d0c:	5483      	strb	r3, [r0, r2]
     d0e:	2255      	movs	r2, #85	; 0x55
     d10:	5483      	strb	r3, [r0, r2]
     d12:	2256      	movs	r2, #86	; 0x56
     d14:	5483      	strb	r3, [r0, r2]
     d16:	2257      	movs	r2, #87	; 0x57
     d18:	5483      	strb	r3, [r0, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     d1a:	2298      	movs	r2, #152	; 0x98
     d1c:	5483      	strb	r3, [r0, r2]
     d1e:	6583      	str	r3, [r0, #88]	; 0x58
     d20:	6783      	str	r3, [r0, #120]	; 0x78
     d22:	2299      	movs	r2, #153	; 0x99
     d24:	5483      	strb	r3, [r0, r2]
     d26:	65c3      	str	r3, [r0, #92]	; 0x5c
     d28:	67c3      	str	r3, [r0, #124]	; 0x7c
     d2a:	229a      	movs	r2, #154	; 0x9a
     d2c:	5483      	strb	r3, [r0, r2]
     d2e:	6603      	str	r3, [r0, #96]	; 0x60
     d30:	2280      	movs	r2, #128	; 0x80
     d32:	5083      	str	r3, [r0, r2]
     d34:	229b      	movs	r2, #155	; 0x9b
     d36:	5483      	strb	r3, [r0, r2]
     d38:	6643      	str	r3, [r0, #100]	; 0x64
     d3a:	2284      	movs	r2, #132	; 0x84
     d3c:	5083      	str	r3, [r0, r2]
     d3e:	229c      	movs	r2, #156	; 0x9c
     d40:	5483      	strb	r3, [r0, r2]
     d42:	6683      	str	r3, [r0, #104]	; 0x68
     d44:	2288      	movs	r2, #136	; 0x88
     d46:	5083      	str	r3, [r0, r2]
     d48:	229d      	movs	r2, #157	; 0x9d
     d4a:	5483      	strb	r3, [r0, r2]
     d4c:	66c3      	str	r3, [r0, #108]	; 0x6c
     d4e:	228c      	movs	r2, #140	; 0x8c
     d50:	5083      	str	r3, [r0, r2]
     d52:	229e      	movs	r2, #158	; 0x9e
     d54:	5483      	strb	r3, [r0, r2]
     d56:	6703      	str	r3, [r0, #112]	; 0x70
     d58:	2290      	movs	r2, #144	; 0x90
     d5a:	5083      	str	r3, [r0, r2]
     d5c:	229f      	movs	r2, #159	; 0x9f
     d5e:	5483      	strb	r3, [r0, r2]
     d60:	6743      	str	r3, [r0, #116]	; 0x74
     d62:	2294      	movs	r2, #148	; 0x94
     d64:	5083      	str	r3, [r0, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
     d66:	2101      	movs	r1, #1
     d68:	22a0      	movs	r2, #160	; 0xa0
     d6a:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
     d6c:	22a1      	movs	r2, #161	; 0xa1
     d6e:	5483      	strb	r3, [r0, r2]
}
     d70:	4770      	bx	lr
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	00ffffff 	.word	0x00ffffff

00000d78 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
     d78:	b5f0      	push	{r4, r5, r6, r7, lr}
     d7a:	465f      	mov	r7, fp
     d7c:	4656      	mov	r6, sl
     d7e:	464d      	mov	r5, r9
     d80:	4644      	mov	r4, r8
     d82:	b4f0      	push	{r4, r5, r6, r7}
     d84:	b08d      	sub	sp, #52	; 0x34
     d86:	1c06      	adds	r6, r0, #0
     d88:	1c0c      	adds	r4, r1, #0
     d8a:	1c15      	adds	r5, r2, #0
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     d8c:	1c08      	adds	r0, r1, #0
     d8e:	4bce      	ldr	r3, [pc, #824]	; (10c8 <tcc_init+0x350>)
     d90:	4798      	blx	r3
     d92:	1c03      	adds	r3, r0, #0
     d94:	4acd      	ldr	r2, [pc, #820]	; (10cc <tcc_init+0x354>)
     d96:	6a10      	ldr	r0, [r2, #32]
     d98:	2120      	movs	r1, #32
     d9a:	4301      	orrs	r1, r0
     d9c:	6211      	str	r1, [r2, #32]
	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_pm_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     d9e:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     da0:	201c      	movs	r0, #28
	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_pm_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     da2:	0791      	lsls	r1, r2, #30
     da4:	d500      	bpl.n	da8 <tcc_init+0x30>
     da6:	e1d9      	b.n	115c <tcc_init+0x3e4>
		return STATUS_ERR_DENIED;
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     da8:	6822      	ldr	r2, [r4, #0]
     daa:	07d7      	lsls	r7, r2, #31
     dac:	d500      	bpl.n	db0 <tcc_init+0x38>
     dae:	e1d5      	b.n	115c <tcc_init+0x3e4>

	/* Check all counter values */
	if ((config->counter.count > count_max)
		|| (config->counter.period > count_max)
		) {
		return STATUS_ERR_INVALID_ARG;
     db0:	2017      	movs	r0, #23

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];

	/* Check all counter values */
	if ((config->counter.count > count_max)
     db2:	4ac7      	ldr	r2, [pc, #796]	; (10d0 <tcc_init+0x358>)
     db4:	6829      	ldr	r1, [r5, #0]
     db6:	4291      	cmp	r1, r2
     db8:	d900      	bls.n	dbc <tcc_init+0x44>
     dba:	e1cf      	b.n	115c <tcc_init+0x3e4>
		|| (config->counter.period > count_max)
     dbc:	686f      	ldr	r7, [r5, #4]
     dbe:	4297      	cmp	r7, r2
     dc0:	d900      	bls.n	dc4 <tcc_init+0x4c>
     dc2:	e1cb      	b.n	115c <tcc_init+0x3e4>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
     dc4:	69e8      	ldr	r0, [r5, #28]
     dc6:	4290      	cmp	r0, r2
     dc8:	d900      	bls.n	dcc <tcc_init+0x54>
     dca:	e16b      	b.n	10a4 <tcc_init+0x32c>
     dcc:	6a29      	ldr	r1, [r5, #32]
     dce:	4291      	cmp	r1, r2
     dd0:	d900      	bls.n	dd4 <tcc_init+0x5c>
     dd2:	e169      	b.n	10a8 <tcc_init+0x330>
     dd4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
     dd6:	4297      	cmp	r7, r2
     dd8:	d900      	bls.n	ddc <tcc_init+0x64>
     dda:	e167      	b.n	10ac <tcc_init+0x334>
     ddc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     dde:	4290      	cmp	r0, r2
     de0:	d900      	bls.n	de4 <tcc_init+0x6c>
     de2:	e165      	b.n	10b0 <tcc_init+0x338>
     de4:	2200      	movs	r2, #0
     de6:	18a9      	adds	r1, r5, r2
     de8:	3198      	adds	r1, #152	; 0x98
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
     dea:	7809      	ldrb	r1, [r1, #0]
     dec:	2900      	cmp	r1, #0
     dee:	d002      	beq.n	df6 <tcc_init+0x7e>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
     df0:	2a07      	cmp	r2, #7
     df2:	dd00      	ble.n	df6 <tcc_init+0x7e>
     df4:	e15e      	b.n	10b4 <tcc_init+0x33c>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     df6:	3201      	adds	r2, #1
     df8:	2a08      	cmp	r2, #8
     dfa:	d1f4      	bne.n	de6 <tcc_init+0x6e>
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
     dfc:	7c2a      	ldrb	r2, [r5, #16]

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     dfe:	3a01      	subs	r2, #1
     e00:	4251      	negs	r1, r2
     e02:	414a      	adcs	r2, r1
     e04:	0612      	lsls	r2, r2, #24
     e06:	9203      	str	r2, [sp, #12]
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
     e08:	7c6a      	ldrb	r2, [r5, #17]
     e0a:	2a01      	cmp	r2, #1
     e0c:	d108      	bne.n	e20 <tcc_init+0xa8>

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     e0e:	2280      	movs	r2, #128	; 0x80
     e10:	0492      	lsls	r2, r2, #18
     e12:	9f03      	ldr	r7, [sp, #12]
     e14:	4317      	orrs	r7, r2
     e16:	9703      	str	r7, [sp, #12]
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
     e18:	7caa      	ldrb	r2, [r5, #18]
     e1a:	2a01      	cmp	r2, #1
     e1c:	d10a      	bne.n	e34 <tcc_init+0xbc>
     e1e:	e003      	b.n	e28 <tcc_init+0xb0>
     e20:	7caa      	ldrb	r2, [r5, #18]
     e22:	2a01      	cmp	r2, #1
     e24:	d000      	beq.n	e28 <tcc_init+0xb0>
     e26:	e18b      	b.n	1140 <tcc_init+0x3c8>

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     e28:	2280      	movs	r2, #128	; 0x80
     e2a:	04d2      	lsls	r2, r2, #19
     e2c:	9f03      	ldr	r7, [sp, #12]
     e2e:	4317      	orrs	r7, r2
     e30:	9703      	str	r7, [sp, #12]
     e32:	e185      	b.n	1140 <tcc_init+0x3c8>
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
     e34:	7cea      	ldrb	r2, [r5, #19]
     e36:	2a01      	cmp	r2, #1
     e38:	d104      	bne.n	e44 <tcc_init+0xcc>

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     e3a:	2280      	movs	r2, #128	; 0x80
     e3c:	0512      	lsls	r2, r2, #20
     e3e:	9f03      	ldr	r7, [sp, #12]
     e40:	4317      	orrs	r7, r2
     e42:	9703      	str	r7, [sp, #12]
		}
	}

	if (config->run_in_standby) {
     e44:	22a1      	movs	r2, #161	; 0xa1
     e46:	5caa      	ldrb	r2, [r5, r2]
     e48:	2a00      	cmp	r2, #0
     e4a:	d004      	beq.n	e56 <tcc_init+0xde>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     e4c:	2280      	movs	r2, #128	; 0x80
     e4e:	0112      	lsls	r2, r2, #4
     e50:	9f03      	ldr	r7, [sp, #12]
     e52:	4317      	orrs	r7, r2
     e54:	9703      	str	r7, [sp, #12]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     e56:	7b2f      	ldrb	r7, [r5, #12]
     e58:	9706      	str	r7, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     e5a:	7aef      	ldrb	r7, [r5, #11]
     e5c:	9707      	str	r7, [sp, #28]
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;

	if (config->counter.oneshot) {
     e5e:	7a2a      	ldrb	r2, [r5, #8]
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;
     e60:	1e51      	subs	r1, r2, #1
     e62:	418a      	sbcs	r2, r1
     e64:	0092      	lsls	r2, r2, #2
     e66:	9204      	str	r2, [sp, #16]

	if (config->counter.oneshot) {
		ctrlb |= TCC_CTRLBSET_ONESHOT;
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     e68:	7a6a      	ldrb	r2, [r5, #9]
     e6a:	2a01      	cmp	r2, #1
     e6c:	d102      	bne.n	e74 <tcc_init+0xfc>
		ctrlb |= TCC_CTRLBSET_DIR;
     e6e:	9f04      	ldr	r7, [sp, #16]
     e70:	4317      	orrs	r7, r2
     e72:	9704      	str	r7, [sp, #16]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
     e74:	1c2a      	adds	r2, r5, #0
     e76:	322c      	adds	r2, #44	; 0x2c
     e78:	7a50      	ldrb	r0, [r2, #9]
     e7a:	2803      	cmp	r0, #3
     e7c:	d900      	bls.n	e80 <tcc_init+0x108>
     e7e:	e121      	b.n	10c4 <tcc_init+0x34c>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
     e80:	222c      	movs	r2, #44	; 0x2c
     e82:	5caf      	ldrb	r7, [r5, r2]
     e84:	2f0f      	cmp	r7, #15
     e86:	d900      	bls.n	e8a <tcc_init+0x112>
     e88:	e11c      	b.n	10c4 <tcc_init+0x34c>
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
     e8a:	212c      	movs	r1, #44	; 0x2c
     e8c:	1949      	adds	r1, r1, r5
     e8e:	4688      	mov	r8, r1
     e90:	2236      	movs	r2, #54	; 0x36
     e92:	1952      	adds	r2, r2, r5
     e94:	4693      	mov	fp, r2
     e96:	a90a      	add	r1, sp, #40	; 0x28
     e98:	aa0b      	add	r2, sp, #44	; 0x2c
     e9a:	9202      	str	r2, [sp, #8]
     e9c:	4642      	mov	r2, r8
     e9e:	46b0      	mov	r8, r6
     ea0:	465e      	mov	r6, fp
     ea2:	46a1      	mov	r9, r4
     ea4:	46aa      	mov	sl, r5
     ea6:	469b      	mov	fp, r3
     ea8:	e00a      	b.n	ec0 <tcc_init+0x148>
     eaa:	1c32      	adds	r2, r6, #0
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
     eac:	7a70      	ldrb	r0, [r6, #9]
     eae:	2803      	cmp	r0, #3
     eb0:	d900      	bls.n	eb4 <tcc_init+0x13c>
     eb2:	e107      	b.n	10c4 <tcc_init+0x34c>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
     eb4:	7837      	ldrb	r7, [r6, #0]
     eb6:	360a      	adds	r6, #10
     eb8:	3104      	adds	r1, #4
     eba:	2f0f      	cmp	r7, #15
     ebc:	d900      	bls.n	ec0 <tcc_init+0x148>
     ebe:	e101      	b.n	10c4 <tcc_init+0x34c>
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     ec0:	063d      	lsls	r5, r7, #24
     ec2:	23f0      	movs	r3, #240	; 0xf0
     ec4:	051b      	lsls	r3, r3, #20
     ec6:	401d      	ands	r5, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     ec8:	7854      	ldrb	r4, [r2, #1]
     eca:	0424      	lsls	r4, r4, #16
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     ecc:	7893      	ldrb	r3, [r2, #2]
     ece:	1e5f      	subs	r7, r3, #1
     ed0:	41bb      	sbcs	r3, r7
     ed2:	01db      	lsls	r3, r3, #7
     ed4:	9301      	str	r3, [sp, #4]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     ed6:	78d7      	ldrb	r7, [r2, #3]
     ed8:	1e7b      	subs	r3, r7, #1
     eda:	419f      	sbcs	r7, r3
     edc:	00ff      	lsls	r7, r7, #3
     ede:	9700      	str	r7, [sp, #0]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     ee0:	7917      	ldrb	r7, [r2, #4]
     ee2:	1e7b      	subs	r3, r7, #1
     ee4:	419f      	sbcs	r7, r3
     ee6:	013f      	lsls	r7, r7, #4
     ee8:	46bc      	mov	ip, r7
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     eea:	0280      	lsls	r0, r0, #10
     eec:	27c0      	movs	r7, #192	; 0xc0
     eee:	013f      	lsls	r7, r7, #4
     ef0:	4038      	ands	r0, r7
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     ef2:	4305      	orrs	r5, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
     ef4:	7950      	ldrb	r0, [r2, #5]
     ef6:	2303      	movs	r3, #3
     ef8:	4018      	ands	r0, r3
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     efa:	4305      	orrs	r5, r0
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     efc:	432c      	orrs	r4, r5
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
     efe:	7990      	ldrb	r0, [r2, #6]
     f00:	0140      	lsls	r0, r0, #5
     f02:	2760      	movs	r7, #96	; 0x60
     f04:	4038      	ands	r0, r7
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     f06:	4304      	orrs	r4, r0
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
     f08:	79d0      	ldrb	r0, [r2, #7]
     f0a:	0200      	lsls	r0, r0, #8
     f0c:	23c0      	movs	r3, #192	; 0xc0
     f0e:	009b      	lsls	r3, r3, #2
     f10:	4018      	ands	r0, r3
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
     f12:	4304      	orrs	r4, r0
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     f14:	7a10      	ldrb	r0, [r2, #8]
     f16:	0300      	lsls	r0, r0, #12
     f18:	27e0      	movs	r7, #224	; 0xe0
     f1a:	01ff      	lsls	r7, r7, #7
     f1c:	4038      	ands	r0, r7
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
     f1e:	1c22      	adds	r2, r4, #0
     f20:	4302      	orrs	r2, r0
				| TCC_FCTRLA_HALT(cfg->halt_action)
     f22:	9b01      	ldr	r3, [sp, #4]
     f24:	4313      	orrs	r3, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     f26:	9f00      	ldr	r7, [sp, #0]
     f28:	431f      	orrs	r7, r3
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     f2a:	4660      	mov	r0, ip
     f2c:	4307      	orrs	r7, r0
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
     f2e:	600f      	str	r7, [r1, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     f30:	9a02      	ldr	r2, [sp, #8]
     f32:	4291      	cmp	r1, r2
     f34:	d1b9      	bne.n	eaa <tcc_init+0x132>
     f36:	4646      	mov	r6, r8
     f38:	464c      	mov	r4, r9
     f3a:	4655      	mov	r5, sl
     f3c:	465b      	mov	r3, fp
     f3e:	4651      	mov	r1, sl
     f40:	3141      	adds	r1, #65	; 0x41
     f42:	2700      	movs	r7, #0
     f44:	2200      	movs	r2, #0
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     f46:	2001      	movs	r0, #1
     f48:	4680      	mov	r8, r0
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     f4a:	2002      	movs	r0, #2
     f4c:	30ff      	adds	r0, #255	; 0xff
     f4e:	4681      	mov	r9, r0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     f50:	2080      	movs	r0, #128	; 0x80
     f52:	0240      	lsls	r0, r0, #9
     f54:	4684      	mov	ip, r0
     f56:	18a8      	adds	r0, r5, r2
     f58:	3050      	adds	r0, #80	; 0x50
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
     f5a:	7800      	ldrb	r0, [r0, #0]
     f5c:	2800      	cmp	r0, #0
     f5e:	d009      	beq.n	f74 <tcc_init+0x1fc>
			if (i >= ow_num) {
     f60:	2a07      	cmp	r2, #7
     f62:	d900      	bls.n	f66 <tcc_init+0x1ee>
     f64:	e0a8      	b.n	10b8 <tcc_init+0x340>
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     f66:	4660      	mov	r0, ip
     f68:	4090      	lsls	r0, r2
     f6a:	4307      	orrs	r7, r0
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
     f6c:	7808      	ldrb	r0, [r1, #0]
     f6e:	2800      	cmp	r0, #0
     f70:	d106      	bne.n	f80 <tcc_init+0x208>
     f72:	e00e      	b.n	f92 <tcc_init+0x21a>
     f74:	7808      	ldrb	r0, [r1, #0]
     f76:	2800      	cmp	r0, #0
     f78:	d00b      	beq.n	f92 <tcc_init+0x21a>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
     f7a:	2a07      	cmp	r2, #7
     f7c:	d900      	bls.n	f80 <tcc_init+0x208>
     f7e:	e09d      	b.n	10bc <tcc_init+0x344>
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
     f80:	2802      	cmp	r0, #2
     f82:	d103      	bne.n	f8c <tcc_init+0x214>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     f84:	4648      	mov	r0, r9
     f86:	4090      	lsls	r0, r2
     f88:	4307      	orrs	r7, r0
     f8a:	e002      	b.n	f92 <tcc_init+0x21a>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     f8c:	4640      	mov	r0, r8
     f8e:	4090      	lsls	r0, r2
     f90:	4307      	orrs	r7, r0
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     f92:	3201      	adds	r2, #1
     f94:	3102      	adds	r1, #2
     f96:	2a08      	cmp	r2, #8
     f98:	d1dd      	bne.n	f56 <tcc_init+0x1de>
     f9a:	e0a9      	b.n	10f0 <tcc_init+0x378>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
     f9c:	2280      	movs	r2, #128	; 0x80
     f9e:	0312      	lsls	r2, r2, #12
     fa0:	4641      	mov	r1, r8
     fa2:	4311      	orrs	r1, r2
     fa4:	4688      	mov	r8, r1
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     fa6:	2200      	movs	r2, #0

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		module_inst->callback[i] = NULL;
     fa8:	1c10      	adds	r0, r2, #0
     faa:	18b1      	adds	r1, r6, r2
     fac:	6048      	str	r0, [r1, #4]
     fae:	3204      	adds	r2, #4
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     fb0:	2a30      	cmp	r2, #48	; 0x30
     fb2:	d1fa      	bne.n	faa <tcc_init+0x232>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
     fb4:	2200      	movs	r2, #0
     fb6:	4691      	mov	r9, r2
     fb8:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     fba:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     fbc:	009b      	lsls	r3, r3, #2
     fbe:	4a45      	ldr	r2, [pc, #276]	; (10d4 <tcc_init+0x35c>)
     fc0:	509e      	str	r6, [r3, r2]
#endif

	module_inst->hw = hw;
     fc2:	6034      	str	r4, [r6, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     fc4:	23a0      	movs	r3, #160	; 0xa0
     fc6:	5cea      	ldrb	r2, [r5, r3]
     fc8:	233c      	movs	r3, #60	; 0x3c
     fca:	54f2      	strb	r2, [r6, r3]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->counter.clock_source;
     fcc:	a909      	add	r1, sp, #36	; 0x24
     fce:	7aab      	ldrb	r3, [r5, #10]
     fd0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     fd2:	2011      	movs	r0, #17
     fd4:	4b40      	ldr	r3, [pc, #256]	; (10d8 <tcc_init+0x360>)
     fd6:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     fd8:	2011      	movs	r0, #17
     fda:	4b40      	ldr	r3, [pc, #256]	; (10dc <tcc_init+0x364>)
     fdc:	4798      	blx	r3
     fde:	2178      	movs	r1, #120	; 0x78
     fe0:	1949      	adds	r1, r1, r5

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     fe2:	464e      	mov	r6, r9
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     fe4:	2201      	movs	r2, #1
     fe6:	4691      	mov	r9, r2
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     fe8:	1c23      	adds	r3, r4, #0
     fea:	1c0c      	adds	r4, r1, #0
     fec:	469a      	mov	sl, r3
     fee:	19ab      	adds	r3, r5, r6
     ff0:	3398      	adds	r3, #152	; 0x98
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
     ff2:	781b      	ldrb	r3, [r3, #0]
     ff4:	2b00      	cmp	r3, #0
     ff6:	d013      	beq.n	1020 <tcc_init+0x2a8>
     ff8:	4648      	mov	r0, r9
     ffa:	2322      	movs	r3, #34	; 0x22
     ffc:	446b      	add	r3, sp
     ffe:	7018      	strb	r0, [r3, #0]
	config->powersave    = false;
    1000:	2300      	movs	r3, #0
    1002:	2123      	movs	r1, #35	; 0x23
    1004:	4469      	add	r1, sp
    1006:	700b      	strb	r3, [r1, #0]
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1008:	6823      	ldr	r3, [r4, #0]
    100a:	aa08      	add	r2, sp, #32
    100c:	7013      	strb	r3, [r2, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    100e:	2121      	movs	r1, #33	; 0x21
    1010:	4469      	add	r1, sp
    1012:	7008      	strb	r0, [r1, #0]
    1014:	1c23      	adds	r3, r4, #0
    1016:	3b20      	subs	r3, #32
		system_pinmux_pin_set_config(
    1018:	7818      	ldrb	r0, [r3, #0]
    101a:	1c11      	adds	r1, r2, #0
    101c:	4a30      	ldr	r2, [pc, #192]	; (10e0 <tcc_init+0x368>)
    101e:	4790      	blx	r2
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1020:	3601      	adds	r6, #1
    1022:	3404      	adds	r4, #4
    1024:	2e08      	cmp	r6, #8
    1026:	d1e2      	bne.n	fee <tcc_init+0x276>
    1028:	4654      	mov	r4, sl

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    102a:	9b07      	ldr	r3, [sp, #28]
    102c:	021a      	lsls	r2, r3, #8
	}

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    102e:	9806      	ldr	r0, [sp, #24]
    1030:	0303      	lsls	r3, r0, #12
    1032:	4313      	orrs	r3, r2
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1034:	9903      	ldr	r1, [sp, #12]
    1036:	430b      	orrs	r3, r1
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    1038:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    103a:	2204      	movs	r2, #4
    103c:	68a3      	ldr	r3, [r4, #8]
    103e:	421a      	tst	r2, r3
    1040:	d1fc      	bne.n	103c <tcc_init+0x2c4>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    1042:	23ff      	movs	r3, #255	; 0xff
    1044:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1046:	2204      	movs	r2, #4
    1048:	68a3      	ldr	r3, [r4, #8]
    104a:	421a      	tst	r2, r3
    104c:	d1fc      	bne.n	1048 <tcc_init+0x2d0>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    104e:	9a04      	ldr	r2, [sp, #16]
    1050:	7162      	strb	r2, [r4, #5]

	hw->FCTRLA.reg = faults[0];
    1052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1054:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    1056:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1058:	6120      	str	r0, [r4, #16]

	hw->DRVCTRL.reg = drvctrl;
    105a:	61a7      	str	r7, [r4, #24]

	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    105c:	4a21      	ldr	r2, [pc, #132]	; (10e4 <tcc_init+0x36c>)
    105e:	68a3      	ldr	r3, [r4, #8]
    1060:	4213      	tst	r3, r2
    1062:	d1fc      	bne.n	105e <tcc_init+0x2e6>
		/* Wait for sync */
	}
	hw->WAVE.reg = waves[0];
    1064:	4641      	mov	r1, r8
    1066:	63e1      	str	r1, [r4, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    1068:	2210      	movs	r2, #16
    106a:	68a3      	ldr	r3, [r4, #8]
    106c:	421a      	tst	r2, r3
    106e:	d1fc      	bne.n	106a <tcc_init+0x2f2>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    1070:	682a      	ldr	r2, [r5, #0]
    1072:	6362      	str	r2, [r4, #52]	; 0x34

	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1074:	4a1c      	ldr	r2, [pc, #112]	; (10e8 <tcc_init+0x370>)
    1076:	68a3      	ldr	r3, [r4, #8]
    1078:	4213      	tst	r3, r2
    107a:	d1fc      	bne.n	1076 <tcc_init+0x2fe>
		/* Wait for sync */
	}
	hw->PER.reg = (config->counter.period);
    107c:	686b      	ldr	r3, [r5, #4]
    107e:	6423      	str	r3, [r4, #64]	; 0x40
    1080:	351c      	adds	r5, #28

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1082:	2100      	movs	r1, #0
		while (hw->SYNCBUSY.reg & (
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1084:	4819      	ldr	r0, [pc, #100]	; (10ec <tcc_init+0x374>)
    1086:	1c02      	adds	r2, r0, #0
    1088:	408a      	lsls	r2, r1
		/* Wait for sync */
	}
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
		while (hw->SYNCBUSY.reg & (
    108a:	68a3      	ldr	r3, [r4, #8]
    108c:	4213      	tst	r3, r2
    108e:	d1fc      	bne.n	108a <tcc_init+0x312>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
		hw->CC[i].reg = (config->compare.match[i]);
    1090:	cd04      	ldmia	r5!, {r2}
    1092:	1c0b      	adds	r3, r1, #0
    1094:	3310      	adds	r3, #16
    1096:	009b      	lsls	r3, r3, #2
    1098:	18e3      	adds	r3, r4, r3
    109a:	605a      	str	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
		/* Wait for sync */
	}
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    109c:	3101      	adds	r1, #1
    109e:	2904      	cmp	r1, #4
    10a0:	d1f1      	bne.n	1086 <tcc_init+0x30e>
    10a2:	e00d      	b.n	10c0 <tcc_init+0x348>

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
			) {
			return STATUS_ERR_INVALID_ARG;
    10a4:	2017      	movs	r0, #23
    10a6:	e059      	b.n	115c <tcc_init+0x3e4>
    10a8:	2017      	movs	r0, #23
    10aa:	e057      	b.n	115c <tcc_init+0x3e4>
    10ac:	2017      	movs	r0, #23
    10ae:	e055      	b.n	115c <tcc_init+0x3e4>
    10b0:	2017      	movs	r0, #23
    10b2:	e053      	b.n	115c <tcc_init+0x3e4>
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
			return STATUS_ERR_INVALID_ARG;
    10b4:	2017      	movs	r0, #23
    10b6:	e051      	b.n	115c <tcc_init+0x3e4>

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
    10b8:	2017      	movs	r0, #23
    10ba:	e04f      	b.n	115c <tcc_init+0x3e4>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    10bc:	2017      	movs	r0, #23
    10be:	e04d      	b.n	115c <tcc_init+0x3e4>
			/* Wait for sync */
		}
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    10c0:	2000      	movs	r0, #0
    10c2:	e04b      	b.n	115c <tcc_init+0x3e4>

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
			) {
			return STATUS_ERR_INVALID_ARG;
    10c4:	2017      	movs	r0, #23
    10c6:	e049      	b.n	115c <tcc_init+0x3e4>
    10c8:	00000c39 	.word	0x00000c39
    10cc:	40000400 	.word	0x40000400
    10d0:	00ffffff 	.word	0x00ffffff
    10d4:	200000d4 	.word	0x200000d4
    10d8:	00001965 	.word	0x00001965
    10dc:	000018d9 	.word	0x000018d9
    10e0:	00001a3d 	.word	0x00001a3d
    10e4:	00020040 	.word	0x00020040
    10e8:	00040080 	.word	0x00040080
    10ec:	00080100 	.word	0x00080100
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    10f0:	7e6a      	ldrb	r2, [r5, #25]
    10f2:	0112      	lsls	r2, r2, #4
    10f4:	2130      	movs	r1, #48	; 0x30
    10f6:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    10f8:	7e2a      	ldrb	r2, [r5, #24]
    10fa:	2007      	movs	r0, #7
    10fc:	4002      	ands	r2, r0
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    10fe:	4311      	orrs	r1, r2
    1100:	4688      	mov	r8, r1
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
    1102:	7d2a      	ldrb	r2, [r5, #20]
    1104:	2a00      	cmp	r2, #0
    1106:	d020      	beq.n	114a <tcc_init+0x3d2>
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    1108:	2280      	movs	r2, #128	; 0x80
    110a:	0252      	lsls	r2, r2, #9
    110c:	4311      	orrs	r1, r2
    110e:	4688      	mov	r8, r1
    1110:	e01b      	b.n	114a <tcc_init+0x3d2>
    1112:	2280      	movs	r2, #128	; 0x80
    1114:	0292      	lsls	r2, r2, #10
    1116:	4640      	mov	r0, r8
    1118:	4310      	orrs	r0, r2
    111a:	4680      	mov	r8, r0

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
    111c:	7daa      	ldrb	r2, [r5, #22]
    111e:	2a00      	cmp	r2, #0
    1120:	d103      	bne.n	112a <tcc_init+0x3b2>
    1122:	e008      	b.n	1136 <tcc_init+0x3be>
    1124:	7daa      	ldrb	r2, [r5, #22]
    1126:	2a00      	cmp	r2, #0
    1128:	d013      	beq.n	1152 <tcc_init+0x3da>
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    112a:	2280      	movs	r2, #128	; 0x80
    112c:	02d2      	lsls	r2, r2, #11
    112e:	4641      	mov	r1, r8
    1130:	4311      	orrs	r1, r2
    1132:	4688      	mov	r8, r1
    1134:	e00d      	b.n	1152 <tcc_init+0x3da>

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
    1136:	7dea      	ldrb	r2, [r5, #23]
    1138:	2a00      	cmp	r2, #0
    113a:	d000      	beq.n	113e <tcc_init+0x3c6>
    113c:	e72e      	b.n	f9c <tcc_init+0x224>
    113e:	e732      	b.n	fa6 <tcc_init+0x22e>
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
    1140:	7cea      	ldrb	r2, [r5, #19]
    1142:	2a01      	cmp	r2, #1
    1144:	d000      	beq.n	1148 <tcc_init+0x3d0>
    1146:	e67d      	b.n	e44 <tcc_init+0xcc>
    1148:	e677      	b.n	e3a <tcc_init+0xc2>

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
    114a:	7d6a      	ldrb	r2, [r5, #21]
    114c:	2a00      	cmp	r2, #0
    114e:	d1e0      	bne.n	1112 <tcc_init+0x39a>
    1150:	e7e8      	b.n	1124 <tcc_init+0x3ac>
    1152:	7dea      	ldrb	r2, [r5, #23]
    1154:	2a00      	cmp	r2, #0
    1156:	d000      	beq.n	115a <tcc_init+0x3e2>
    1158:	e720      	b.n	f9c <tcc_init+0x224>
    115a:	e724      	b.n	fa6 <tcc_init+0x22e>
		}
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    115c:	b00d      	add	sp, #52	; 0x34
    115e:	bc3c      	pop	{r2, r3, r4, r5}
    1160:	4690      	mov	r8, r2
    1162:	4699      	mov	r9, r3
    1164:	46a2      	mov	sl, r4
    1166:	46ab      	mov	fp, r5
    1168:	bdf0      	pop	{r4, r5, r6, r7, pc}
    116a:	46c0      	nop			; (mov r8, r8)

0000116c <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    116c:	0092      	lsls	r2, r2, #2
    116e:	1883      	adds	r3, r0, r2
    1170:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    1172:	4b03      	ldr	r3, [pc, #12]	; (1180 <tcc_register_callback+0x14>)
    1174:	58d3      	ldr	r3, [r2, r3]
    1176:	6b42      	ldr	r2, [r0, #52]	; 0x34
    1178:	4313      	orrs	r3, r2
    117a:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    117c:	2000      	movs	r0, #0
    117e:	4770      	bx	lr
    1180:	00001d6c 	.word	0x00001d6c

00001184 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    1184:	b538      	push	{r3, r4, r5, lr}
    1186:	1c04      	adds	r4, r0, #0
    1188:	1c0d      	adds	r5, r1, #0
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    118a:	6800      	ldr	r0, [r0, #0]
    118c:	4b07      	ldr	r3, [pc, #28]	; (11ac <tcc_enable_callback+0x28>)
    118e:	4798      	blx	r3
    1190:	2280      	movs	r2, #128	; 0x80
    1192:	0152      	lsls	r2, r2, #5
    1194:	4b06      	ldr	r3, [pc, #24]	; (11b0 <tcc_enable_callback+0x2c>)
    1196:	601a      	str	r2, [r3, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    1198:	00ad      	lsls	r5, r5, #2
    119a:	4b06      	ldr	r3, [pc, #24]	; (11b4 <tcc_enable_callback+0x30>)
    119c:	58eb      	ldr	r3, [r5, r3]
    119e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    11a0:	431a      	orrs	r2, r3
    11a2:	63a2      	str	r2, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    11a4:	6822      	ldr	r2, [r4, #0]
    11a6:	6293      	str	r3, [r2, #40]	; 0x28
}
    11a8:	bd38      	pop	{r3, r4, r5, pc}
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	00000c39 	.word	0x00000c39
    11b0:	e000e100 	.word	0xe000e100
    11b4:	00001d6c 	.word	0x00001d6c

000011b8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler.
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    11b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ba:	4647      	mov	r7, r8
    11bc:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    11be:	0080      	lsls	r0, r0, #2
    11c0:	4b0d      	ldr	r3, [pc, #52]	; (11f8 <_tcc_interrupt_handler+0x40>)
    11c2:	58c6      	ldr	r6, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    11c4:	6833      	ldr	r3, [r6, #0]
    11c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    11c8:	6b72      	ldr	r2, [r6, #52]	; 0x34
    11ca:	4013      	ands	r3, r2
    11cc:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    11ce:	401a      	ands	r2, r3
    11d0:	4690      	mov	r8, r2
    11d2:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    11d4:	4f09      	ldr	r7, [pc, #36]	; (11fc <_tcc_interrupt_handler+0x44>)
    11d6:	59e5      	ldr	r5, [r4, r7]
    11d8:	4643      	mov	r3, r8
    11da:	422b      	tst	r3, r5
    11dc:	d005      	beq.n	11ea <_tcc_interrupt_handler+0x32>
    11de:	1933      	adds	r3, r6, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    11e0:	685b      	ldr	r3, [r3, #4]
    11e2:	1c30      	adds	r0, r6, #0
    11e4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    11e6:	6833      	ldr	r3, [r6, #0]
    11e8:	62dd      	str	r5, [r3, #44]	; 0x2c
    11ea:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    11ec:	2c30      	cmp	r4, #48	; 0x30
    11ee:	d1f2      	bne.n	11d6 <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    11f0:	bc04      	pop	{r2}
    11f2:	4690      	mov	r8, r2
    11f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	200000d4 	.word	0x200000d4
    11fc:	00001d6c 	.word	0x00001d6c

00001200 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1200:	b508      	push	{r3, lr}
    1202:	2000      	movs	r0, #0
    1204:	4b01      	ldr	r3, [pc, #4]	; (120c <TCC0_Handler+0xc>)
    1206:	4798      	blx	r3
    1208:	bd08      	pop	{r3, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	000011b9 	.word	0x000011b9

00001210 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1210:	4b0c      	ldr	r3, [pc, #48]	; (1244 <cpu_irq_enter_critical+0x34>)
    1212:	681b      	ldr	r3, [r3, #0]
    1214:	2b00      	cmp	r3, #0
    1216:	d110      	bne.n	123a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1218:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    121c:	2b00      	cmp	r3, #0
    121e:	d109      	bne.n	1234 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1220:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1222:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1226:	2200      	movs	r2, #0
    1228:	4b07      	ldr	r3, [pc, #28]	; (1248 <cpu_irq_enter_critical+0x38>)
    122a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    122c:	2201      	movs	r2, #1
    122e:	4b05      	ldr	r3, [pc, #20]	; (1244 <cpu_irq_enter_critical+0x34>)
    1230:	711a      	strb	r2, [r3, #4]
    1232:	e002      	b.n	123a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1234:	2200      	movs	r2, #0
    1236:	4b03      	ldr	r3, [pc, #12]	; (1244 <cpu_irq_enter_critical+0x34>)
    1238:	711a      	strb	r2, [r3, #4]
		}

	}

	cpu_irq_critical_section_counter++;
    123a:	4b02      	ldr	r3, [pc, #8]	; (1244 <cpu_irq_enter_critical+0x34>)
    123c:	681a      	ldr	r2, [r3, #0]
    123e:	3201      	adds	r2, #1
    1240:	601a      	str	r2, [r3, #0]
}
    1242:	4770      	bx	lr
    1244:	2000004c 	.word	0x2000004c
    1248:	20000000 	.word	0x20000000

0000124c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    124c:	4b08      	ldr	r3, [pc, #32]	; (1270 <cpu_irq_leave_critical+0x24>)
    124e:	681a      	ldr	r2, [r3, #0]
    1250:	3a01      	subs	r2, #1
    1252:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1254:	681b      	ldr	r3, [r3, #0]
    1256:	2b00      	cmp	r3, #0
    1258:	d109      	bne.n	126e <cpu_irq_leave_critical+0x22>
    125a:	4b05      	ldr	r3, [pc, #20]	; (1270 <cpu_irq_leave_critical+0x24>)
    125c:	791b      	ldrb	r3, [r3, #4]
    125e:	2b00      	cmp	r3, #0
    1260:	d005      	beq.n	126e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1262:	2201      	movs	r2, #1
    1264:	4b03      	ldr	r3, [pc, #12]	; (1274 <cpu_irq_leave_critical+0x28>)
    1266:	701a      	strb	r2, [r3, #0]
    1268:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    126c:	b662      	cpsie	i
	}
}
    126e:	4770      	bx	lr
    1270:	2000004c 	.word	0x2000004c
    1274:	20000000 	.word	0x20000000

00001278 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1278:	b508      	push	{r3, lr}
	switch (clock_source) {
    127a:	2808      	cmp	r0, #8
    127c:	d834      	bhi.n	12e8 <system_clock_source_get_hz+0x70>
    127e:	0080      	lsls	r0, r0, #2
    1280:	4b1b      	ldr	r3, [pc, #108]	; (12f0 <system_clock_source_get_hz+0x78>)
    1282:	581b      	ldr	r3, [r3, r0]
    1284:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1286:	2080      	movs	r0, #128	; 0x80
    1288:	0200      	lsls	r0, r0, #8
    128a:	e030      	b.n	12ee <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    128c:	4b19      	ldr	r3, [pc, #100]	; (12f4 <system_clock_source_get_hz+0x7c>)
    128e:	6918      	ldr	r0, [r3, #16]
    1290:	e02d      	b.n	12ee <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1292:	4b19      	ldr	r3, [pc, #100]	; (12f8 <system_clock_source_get_hz+0x80>)
    1294:	6a18      	ldr	r0, [r3, #32]
    1296:	0580      	lsls	r0, r0, #22
    1298:	0f80      	lsrs	r0, r0, #30
    129a:	4b18      	ldr	r3, [pc, #96]	; (12fc <system_clock_source_get_hz+0x84>)
    129c:	40c3      	lsrs	r3, r0
    129e:	1c18      	adds	r0, r3, #0
    12a0:	e025      	b.n	12ee <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    12a2:	4b14      	ldr	r3, [pc, #80]	; (12f4 <system_clock_source_get_hz+0x7c>)
    12a4:	6958      	ldr	r0, [r3, #20]
    12a6:	e022      	b.n	12ee <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    12a8:	4b12      	ldr	r3, [pc, #72]	; (12f4 <system_clock_source_get_hz+0x7c>)
    12aa:	681b      	ldr	r3, [r3, #0]
    12ac:	2002      	movs	r0, #2
    12ae:	4018      	ands	r0, r3
    12b0:	d01d      	beq.n	12ee <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    12b2:	4911      	ldr	r1, [pc, #68]	; (12f8 <system_clock_source_get_hz+0x80>)
    12b4:	2210      	movs	r2, #16
    12b6:	68cb      	ldr	r3, [r1, #12]
    12b8:	421a      	tst	r2, r3
    12ba:	d0fc      	beq.n	12b6 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    12bc:	4b0d      	ldr	r3, [pc, #52]	; (12f4 <system_clock_source_get_hz+0x7c>)
    12be:	681b      	ldr	r3, [r3, #0]
    12c0:	075a      	lsls	r2, r3, #29
    12c2:	d513      	bpl.n	12ec <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12c4:	2000      	movs	r0, #0
    12c6:	4b0e      	ldr	r3, [pc, #56]	; (1300 <system_clock_source_get_hz+0x88>)
    12c8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    12ca:	4b0a      	ldr	r3, [pc, #40]	; (12f4 <system_clock_source_get_hz+0x7c>)
    12cc:	689b      	ldr	r3, [r3, #8]
    12ce:	041b      	lsls	r3, r3, #16
    12d0:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12d2:	4358      	muls	r0, r3
    12d4:	e00b      	b.n	12ee <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12d6:	2350      	movs	r3, #80	; 0x50
    12d8:	4a07      	ldr	r2, [pc, #28]	; (12f8 <system_clock_source_get_hz+0x80>)
    12da:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    12dc:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12de:	075a      	lsls	r2, r3, #29
    12e0:	d505      	bpl.n	12ee <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    12e2:	4b04      	ldr	r3, [pc, #16]	; (12f4 <system_clock_source_get_hz+0x7c>)
    12e4:	68d8      	ldr	r0, [r3, #12]
    12e6:	e002      	b.n	12ee <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    12e8:	2000      	movs	r0, #0
    12ea:	e000      	b.n	12ee <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    12ec:	4805      	ldr	r0, [pc, #20]	; (1304 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    12ee:	bd08      	pop	{r3, pc}
    12f0:	00001d9c 	.word	0x00001d9c
    12f4:	20000054 	.word	0x20000054
    12f8:	40000800 	.word	0x40000800
    12fc:	007a1200 	.word	0x007a1200
    1300:	00001981 	.word	0x00001981
    1304:	02dc6c00 	.word	0x02dc6c00

00001308 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1308:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    130a:	4b0c      	ldr	r3, [pc, #48]	; (133c <system_clock_source_osc8m_set_config+0x34>)
    130c:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    130e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1310:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1312:	7840      	ldrb	r0, [r0, #1]
    1314:	2201      	movs	r2, #1
    1316:	4010      	ands	r0, r2
    1318:	0180      	lsls	r0, r0, #6
    131a:	2640      	movs	r6, #64	; 0x40
    131c:	43b4      	bics	r4, r6
    131e:	4304      	orrs	r4, r0
    1320:	402a      	ands	r2, r5
    1322:	01d0      	lsls	r0, r2, #7
    1324:	2280      	movs	r2, #128	; 0x80
    1326:	4394      	bics	r4, r2
    1328:	1c22      	adds	r2, r4, #0
    132a:	4302      	orrs	r2, r0
    132c:	2003      	movs	r0, #3
    132e:	4001      	ands	r1, r0
    1330:	0209      	lsls	r1, r1, #8
    1332:	4803      	ldr	r0, [pc, #12]	; (1340 <system_clock_source_osc8m_set_config+0x38>)
    1334:	4002      	ands	r2, r0
    1336:	430a      	orrs	r2, r1
    1338:	621a      	str	r2, [r3, #32]
}
    133a:	bd70      	pop	{r4, r5, r6, pc}
    133c:	40000800 	.word	0x40000800
    1340:	fffffcff 	.word	0xfffffcff

00001344 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1344:	b5f0      	push	{r4, r5, r6, r7, lr}
    1346:	465f      	mov	r7, fp
    1348:	4656      	mov	r6, sl
    134a:	464d      	mov	r5, r9
    134c:	4644      	mov	r4, r8
    134e:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1350:	4a25      	ldr	r2, [pc, #148]	; (13e8 <system_clock_source_xosc32k_set_config+0xa4>)
    1352:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    1354:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1356:	7803      	ldrb	r3, [r0, #0]
    1358:	4259      	negs	r1, r3
    135a:	4159      	adcs	r1, r3
    135c:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    135e:	7883      	ldrb	r3, [r0, #2]
    1360:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1362:	78c1      	ldrb	r1, [r0, #3]
    1364:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
    1366:	7903      	ldrb	r3, [r0, #4]
    1368:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
    136a:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    136c:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    136e:	7b81      	ldrb	r1, [r0, #14]
    1370:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1372:	6880      	ldr	r0, [r0, #8]
    1374:	4b1d      	ldr	r3, [pc, #116]	; (13ec <system_clock_source_xosc32k_set_config+0xa8>)
    1376:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    1378:	2301      	movs	r3, #1
    137a:	4651      	mov	r1, sl
    137c:	0088      	lsls	r0, r1, #2
    137e:	2104      	movs	r1, #4
    1380:	438c      	bics	r4, r1
    1382:	4304      	orrs	r4, r0
    1384:	4648      	mov	r0, r9
    1386:	4018      	ands	r0, r3
    1388:	00c0      	lsls	r0, r0, #3
    138a:	2108      	movs	r1, #8
    138c:	438c      	bics	r4, r1
    138e:	4304      	orrs	r4, r0
    1390:	4640      	mov	r0, r8
    1392:	4018      	ands	r0, r3
    1394:	0100      	lsls	r0, r0, #4
    1396:	2110      	movs	r1, #16
    1398:	438c      	bics	r4, r1
    139a:	4304      	orrs	r4, r0
    139c:	4660      	mov	r0, ip
    139e:	4018      	ands	r0, r3
    13a0:	0140      	lsls	r0, r0, #5
    13a2:	2120      	movs	r1, #32
    13a4:	438c      	bics	r4, r1
    13a6:	4304      	orrs	r4, r0
    13a8:	1c18      	adds	r0, r3, #0
    13aa:	4038      	ands	r0, r7
    13ac:	0180      	lsls	r0, r0, #6
    13ae:	2740      	movs	r7, #64	; 0x40
    13b0:	43bc      	bics	r4, r7
    13b2:	4304      	orrs	r4, r0
    13b4:	1c18      	adds	r0, r3, #0
    13b6:	4030      	ands	r0, r6
    13b8:	01c0      	lsls	r0, r0, #7
    13ba:	2680      	movs	r6, #128	; 0x80
    13bc:	43b4      	bics	r4, r6
    13be:	4304      	orrs	r4, r0
    13c0:	2007      	movs	r0, #7
    13c2:	4028      	ands	r0, r5
    13c4:	0200      	lsls	r0, r0, #8
    13c6:	4d0a      	ldr	r5, [pc, #40]	; (13f0 <system_clock_source_xosc32k_set_config+0xac>)
    13c8:	402c      	ands	r4, r5
    13ca:	4304      	orrs	r4, r0
    13cc:	4659      	mov	r1, fp
    13ce:	400b      	ands	r3, r1
    13d0:	0319      	lsls	r1, r3, #12
    13d2:	4808      	ldr	r0, [pc, #32]	; (13f4 <system_clock_source_xosc32k_set_config+0xb0>)
    13d4:	1c23      	adds	r3, r4, #0
    13d6:	4003      	ands	r3, r0
    13d8:	430b      	orrs	r3, r1
    13da:	8293      	strh	r3, [r2, #20]
}
    13dc:	bc3c      	pop	{r2, r3, r4, r5}
    13de:	4690      	mov	r8, r2
    13e0:	4699      	mov	r9, r3
    13e2:	46a2      	mov	sl, r4
    13e4:	46ab      	mov	fp, r5
    13e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13e8:	40000800 	.word	0x40000800
    13ec:	20000054 	.word	0x20000054
    13f0:	fffff8ff 	.word	0xfffff8ff
    13f4:	ffffefff 	.word	0xffffefff

000013f8 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    13f8:	b570      	push	{r4, r5, r6, lr}
    13fa:	1c04      	adds	r4, r0, #0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    13fc:	68c1      	ldr	r1, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_REF1) {
    13fe:	7d03      	ldrb	r3, [r0, #20]
    1400:	2b01      	cmp	r3, #1
    1402:	d105      	bne.n	1410 <system_clock_source_dpll_set_config+0x18>
		refclk = refclk / config->reference_divider;
    1404:	8a03      	ldrh	r3, [r0, #16]
    1406:	1c08      	adds	r0, r1, #0
    1408:	1c19      	adds	r1, r3, #0
    140a:	4b1f      	ldr	r3, [pc, #124]	; (1488 <system_clock_source_dpll_set_config+0x90>)
    140c:	4798      	blx	r3
    140e:	1c01      	adds	r1, r0, #0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    1410:	68a3      	ldr	r3, [r4, #8]
    1412:	0118      	lsls	r0, r3, #4
    1414:	4b1c      	ldr	r3, [pc, #112]	; (1488 <system_clock_source_dpll_set_config+0x90>)
    1416:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    1418:	220f      	movs	r2, #15
    141a:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    141c:	0900      	lsrs	r0, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
    141e:	7865      	ldrb	r5, [r4, #1]
    1420:	01ad      	lsls	r5, r5, #6
    1422:	7823      	ldrb	r3, [r4, #0]
    1424:	01db      	lsls	r3, r3, #7
    1426:	431d      	orrs	r5, r3
    1428:	b2ed      	uxtb	r5, r5
    142a:	4b18      	ldr	r3, [pc, #96]	; (148c <system_clock_source_dpll_set_config+0x94>)
    142c:	2144      	movs	r1, #68	; 0x44
    142e:	545d      	strb	r5, [r3, r1]
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1430:	0415      	lsls	r5, r2, #16
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;
    1432:	1e41      	subs	r1, r0, #1
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    1434:	0509      	lsls	r1, r1, #20
    1436:	0d09      	lsrs	r1, r1, #20
	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1438:	4329      	orrs	r1, r5

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
    143a:	6499      	str	r1, [r3, #72]	; 0x48
	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    143c:	78e5      	ldrb	r5, [r4, #3]
    143e:	00ed      	lsls	r5, r5, #3
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    1440:	78a1      	ldrb	r1, [r4, #2]
    1442:	0309      	lsls	r1, r1, #12
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    1444:	4329      	orrs	r1, r5
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    1446:	7925      	ldrb	r5, [r4, #4]
    1448:	00ad      	lsls	r5, r5, #2
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    144a:	4329      	orrs	r1, r5
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    144c:	7ca5      	ldrb	r5, [r4, #18]
    144e:	2603      	movs	r6, #3
    1450:	4035      	ands	r5, r6
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    1452:	4329      	orrs	r1, r5
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    1454:	8a25      	ldrh	r5, [r4, #16]
    1456:	042d      	lsls	r5, r5, #16
    1458:	4e0d      	ldr	r6, [pc, #52]	; (1490 <system_clock_source_dpll_set_config+0x98>)
    145a:	4035      	ands	r5, r6
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    145c:	4329      	orrs	r1, r5
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    145e:	7ce6      	ldrb	r6, [r4, #19]
    1460:	0236      	lsls	r6, r6, #8
    1462:	25e0      	movs	r5, #224	; 0xe0
    1464:	00ed      	lsls	r5, r5, #3
    1466:	4035      	ands	r5, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    1468:	4329      	orrs	r1, r5

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    146a:	7d25      	ldrb	r5, [r4, #20]
    146c:	012d      	lsls	r5, r5, #4
    146e:	2630      	movs	r6, #48	; 0x30
    1470:	4035      	ands	r5, r6
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    1472:	4329      	orrs	r1, r5

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
    1474:	64d9      	str	r1, [r3, #76]	; 0x4c
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(config->reference_frequency *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    1476:	0100      	lsls	r0, r0, #4
    1478:	1812      	adds	r2, r2, r0

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(config->reference_frequency *
    147a:	68e0      	ldr	r0, [r4, #12]
    147c:	4342      	muls	r2, r0
			 (((tmpldr + 1) << 4) + tmpldrfrac)
			) >> 4;
    147e:	0912      	lsrs	r2, r2, #4
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
    1480:	4b04      	ldr	r3, [pc, #16]	; (1494 <system_clock_source_dpll_set_config+0x9c>)
    1482:	60da      	str	r2, [r3, #12]
			(config->reference_frequency *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
			) >> 4;
}
    1484:	bd70      	pop	{r4, r5, r6, pc}
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	00001c61 	.word	0x00001c61
    148c:	40000800 	.word	0x40000800
    1490:	07ff0000 	.word	0x07ff0000
    1494:	20000054 	.word	0x20000054

00001498 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1498:	2808      	cmp	r0, #8
    149a:	d843      	bhi.n	1524 <system_clock_source_enable+0x8c>
    149c:	0080      	lsls	r0, r0, #2
    149e:	4b22      	ldr	r3, [pc, #136]	; (1528 <system_clock_source_enable+0x90>)
    14a0:	581b      	ldr	r3, [r3, r0]
    14a2:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    14a4:	2000      	movs	r0, #0
    14a6:	e03e      	b.n	1526 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    14a8:	4b20      	ldr	r3, [pc, #128]	; (152c <system_clock_source_enable+0x94>)
    14aa:	6a19      	ldr	r1, [r3, #32]
    14ac:	2202      	movs	r2, #2
    14ae:	430a      	orrs	r2, r1
    14b0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    14b2:	2000      	movs	r0, #0
    14b4:	e037      	b.n	1526 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    14b6:	4b1d      	ldr	r3, [pc, #116]	; (152c <system_clock_source_enable+0x94>)
    14b8:	6999      	ldr	r1, [r3, #24]
    14ba:	2202      	movs	r2, #2
    14bc:	430a      	orrs	r2, r1
    14be:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    14c0:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    14c2:	e030      	b.n	1526 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    14c4:	4b19      	ldr	r3, [pc, #100]	; (152c <system_clock_source_enable+0x94>)
    14c6:	8a19      	ldrh	r1, [r3, #16]
    14c8:	2202      	movs	r2, #2
    14ca:	430a      	orrs	r2, r1
    14cc:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    14ce:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    14d0:	e029      	b.n	1526 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    14d2:	4b16      	ldr	r3, [pc, #88]	; (152c <system_clock_source_enable+0x94>)
    14d4:	8a99      	ldrh	r1, [r3, #20]
    14d6:	2202      	movs	r2, #2
    14d8:	430a      	orrs	r2, r1
    14da:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    14dc:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    14de:	e022      	b.n	1526 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    14e0:	4b13      	ldr	r3, [pc, #76]	; (1530 <system_clock_source_enable+0x98>)
    14e2:	6819      	ldr	r1, [r3, #0]
    14e4:	2202      	movs	r2, #2
    14e6:	430a      	orrs	r2, r1
    14e8:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    14ea:	681a      	ldr	r2, [r3, #0]
    14ec:	4b11      	ldr	r3, [pc, #68]	; (1534 <system_clock_source_enable+0x9c>)
    14ee:	401a      	ands	r2, r3
    14f0:	4b0e      	ldr	r3, [pc, #56]	; (152c <system_clock_source_enable+0x94>)
    14f2:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    14f4:	1c19      	adds	r1, r3, #0
    14f6:	2210      	movs	r2, #16
    14f8:	68cb      	ldr	r3, [r1, #12]
    14fa:	421a      	tst	r2, r3
    14fc:	d0fc      	beq.n	14f8 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    14fe:	4a0c      	ldr	r2, [pc, #48]	; (1530 <system_clock_source_enable+0x98>)
    1500:	6891      	ldr	r1, [r2, #8]
    1502:	4b0a      	ldr	r3, [pc, #40]	; (152c <system_clock_source_enable+0x94>)
    1504:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1506:	6851      	ldr	r1, [r2, #4]
    1508:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    150a:	6812      	ldr	r2, [r2, #0]
    150c:	b292      	uxth	r2, r2
    150e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1510:	2000      	movs	r0, #0
    1512:	e008      	b.n	1526 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1514:	4a05      	ldr	r2, [pc, #20]	; (152c <system_clock_source_enable+0x94>)
    1516:	2344      	movs	r3, #68	; 0x44
    1518:	5cd0      	ldrb	r0, [r2, r3]
    151a:	2102      	movs	r1, #2
    151c:	4301      	orrs	r1, r0
    151e:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1520:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1522:	e000      	b.n	1526 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1524:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    1526:	4770      	bx	lr
    1528:	00001dc0 	.word	0x00001dc0
    152c:	40000800 	.word	0x40000800
    1530:	20000054 	.word	0x20000054
    1534:	0000ff7f 	.word	0x0000ff7f

00001538 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1538:	2808      	cmp	r0, #8
    153a:	d832      	bhi.n	15a2 <system_clock_source_disable+0x6a>
    153c:	0080      	lsls	r0, r0, #2
    153e:	4b1a      	ldr	r3, [pc, #104]	; (15a8 <system_clock_source_disable+0x70>)
    1540:	581b      	ldr	r3, [r3, r0]
    1542:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg &= ~SYSCTRL_OSC8M_ENABLE;
    1544:	4b19      	ldr	r3, [pc, #100]	; (15ac <system_clock_source_disable+0x74>)
    1546:	6a1a      	ldr	r2, [r3, #32]
    1548:	2102      	movs	r1, #2
    154a:	438a      	bics	r2, r1
    154c:	621a      	str	r2, [r3, #32]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    154e:	2000      	movs	r0, #0
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg &= ~SYSCTRL_OSC8M_ENABLE;
		break;
    1550:	e028      	b.n	15a4 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1552:	4b16      	ldr	r3, [pc, #88]	; (15ac <system_clock_source_disable+0x74>)
    1554:	699a      	ldr	r2, [r3, #24]
    1556:	2102      	movs	r1, #2
    1558:	438a      	bics	r2, r1
    155a:	619a      	str	r2, [r3, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    155c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg &= ~SYSCTRL_OSC8M_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
		break;
    155e:	e021      	b.n	15a4 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg &= ~SYSCTRL_XOSC_ENABLE;
    1560:	4b12      	ldr	r3, [pc, #72]	; (15ac <system_clock_source_disable+0x74>)
    1562:	8a1a      	ldrh	r2, [r3, #16]
    1564:	2102      	movs	r1, #2
    1566:	438a      	bics	r2, r1
    1568:	821a      	strh	r2, [r3, #16]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    156a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg &= ~SYSCTRL_XOSC_ENABLE;
		break;
    156c:	e01a      	b.n	15a4 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg &= ~SYSCTRL_XOSC32K_ENABLE;
    156e:	4b0f      	ldr	r3, [pc, #60]	; (15ac <system_clock_source_disable+0x74>)
    1570:	8a9a      	ldrh	r2, [r3, #20]
    1572:	2102      	movs	r1, #2
    1574:	438a      	bics	r2, r1
    1576:	829a      	strh	r2, [r3, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    1578:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg &= ~SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg &= ~SYSCTRL_XOSC32K_ENABLE;
		break;
    157a:	e013      	b.n	15a4 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~SYSCTRL_DFLLCTRL_ENABLE;
    157c:	4b0c      	ldr	r3, [pc, #48]	; (15b0 <system_clock_source_disable+0x78>)
    157e:	681a      	ldr	r2, [r3, #0]
    1580:	2102      	movs	r1, #2
    1582:	438a      	bics	r2, r1
    1584:	601a      	str	r2, [r3, #0]
		SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1586:	681a      	ldr	r2, [r3, #0]
    1588:	b292      	uxth	r2, r2
    158a:	4b08      	ldr	r3, [pc, #32]	; (15ac <system_clock_source_disable+0x74>)
    158c:	849a      	strh	r2, [r3, #36]	; 0x24
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    158e:	2000      	movs	r0, #0
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~SYSCTRL_DFLLCTRL_ENABLE;
		SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
    1590:	e008      	b.n	15a4 <system_clock_source_disable+0x6c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg &= ~SYSCTRL_DPLLCTRLA_ENABLE;
    1592:	4a06      	ldr	r2, [pc, #24]	; (15ac <system_clock_source_disable+0x74>)
    1594:	2344      	movs	r3, #68	; 0x44
    1596:	5cd1      	ldrb	r1, [r2, r3]
    1598:	2002      	movs	r0, #2
    159a:	4381      	bics	r1, r0
    159c:	54d1      	strb	r1, [r2, r3]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    159e:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg &= ~SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    15a0:	e000      	b.n	15a4 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    15a2:	2017      	movs	r0, #23

	}

	return STATUS_OK;
}
    15a4:	4770      	bx	lr
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	00001de4 	.word	0x00001de4
    15ac:	40000800 	.word	0x40000800
    15b0:	20000054 	.word	0x20000054

000015b4 <system_clock_source_is_ready>:
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
	uint32_t mask = 0;

	switch (clock_source) {
    15b4:	2808      	cmp	r0, #8
    15b6:	d820      	bhi.n	15fa <system_clock_source_is_ready+0x46>
    15b8:	0080      	lsls	r0, r0, #2
    15ba:	4b11      	ldr	r3, [pc, #68]	; (1600 <system_clock_source_is_ready+0x4c>)
    15bc:	581b      	ldr	r3, [r3, r0]
    15be:	469f      	mov	pc, r3
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    15c0:	2001      	movs	r0, #1
    15c2:	e01b      	b.n	15fc <system_clock_source_is_ready+0x48>
	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    15c4:	2301      	movs	r3, #1
		break;
    15c6:	e010      	b.n	15ea <system_clock_source_is_ready+0x36>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    15c8:	2302      	movs	r3, #2
		break;
    15ca:	e00e      	b.n	15ea <system_clock_source_is_ready+0x36>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    15cc:	2310      	movs	r3, #16
		}
		break;
    15ce:	e00c      	b.n	15ea <system_clock_source_is_ready+0x36>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    15d0:	2350      	movs	r3, #80	; 0x50
    15d2:	4a0c      	ldr	r2, [pc, #48]	; (1604 <system_clock_source_is_ready+0x50>)
    15d4:	5cd0      	ldrb	r0, [r2, r3]
    15d6:	2303      	movs	r3, #3
    15d8:	4018      	ands	r0, r3
    15da:	3803      	subs	r0, #3
    15dc:	4243      	negs	r3, r0
    15de:	4158      	adcs	r0, r3
    15e0:	b2c0      	uxtb	r0, r0
    15e2:	e00b      	b.n	15fc <system_clock_source_is_ready+0x48>
{
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    15e4:	2308      	movs	r3, #8
    15e6:	e000      	b.n	15ea <system_clock_source_is_ready+0x36>
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    15e8:	2304      	movs	r3, #4

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    15ea:	4a06      	ldr	r2, [pc, #24]	; (1604 <system_clock_source_is_ready+0x50>)
    15ec:	68d0      	ldr	r0, [r2, #12]
    15ee:	4018      	ands	r0, r3
    15f0:	1ac0      	subs	r0, r0, r3
    15f2:	4243      	negs	r3, r0
    15f4:	4158      	adcs	r0, r3
    15f6:	b2c0      	uxtb	r0, r0
    15f8:	e000      	b.n	15fc <system_clock_source_is_ready+0x48>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;

	default:
		return false;
    15fa:	2000      	movs	r0, #0
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
}
    15fc:	4770      	bx	lr
    15fe:	46c0      	nop			; (mov r8, r8)
    1600:	00001e08 	.word	0x00001e08
    1604:	40000800 	.word	0x40000800

00001608 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    1608:	b570      	push	{r4, r5, r6, lr}
    160a:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    160c:	22c2      	movs	r2, #194	; 0xc2
    160e:	00d2      	lsls	r2, r2, #3
    1610:	4b3c      	ldr	r3, [pc, #240]	; (1704 <system_clock_init+0xfc>)
    1612:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1614:	4b3c      	ldr	r3, [pc, #240]	; (1708 <system_clock_init+0x100>)
    1616:	685a      	ldr	r2, [r3, #4]
    1618:	211e      	movs	r1, #30
    161a:	438a      	bics	r2, r1
    161c:	2102      	movs	r1, #2
    161e:	430a      	orrs	r2, r1
    1620:	605a      	str	r2, [r3, #4]
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1622:	a80a      	add	r0, sp, #40	; 0x28
    1624:	2300      	movs	r3, #0
    1626:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    1628:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    162a:	2280      	movs	r2, #128	; 0x80
    162c:	0212      	lsls	r2, r2, #8
    162e:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1630:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1632:	2201      	movs	r2, #1
    1634:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1636:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    1638:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    163a:	2203      	movs	r2, #3
    163c:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    163e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1640:	4b32      	ldr	r3, [pc, #200]	; (170c <system_clock_init+0x104>)
    1642:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1644:	2005      	movs	r0, #5
    1646:	4b32      	ldr	r3, [pc, #200]	; (1710 <system_clock_init+0x108>)
    1648:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    164a:	492e      	ldr	r1, [pc, #184]	; (1704 <system_clock_init+0xfc>)
    164c:	2202      	movs	r2, #2
    164e:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1650:	421a      	tst	r2, r3
    1652:	d0fc      	beq.n	164e <system_clock_init+0x46>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1654:	4b2b      	ldr	r3, [pc, #172]	; (1704 <system_clock_init+0xfc>)
    1656:	8a99      	ldrh	r1, [r3, #20]
    1658:	2280      	movs	r2, #128	; 0x80
    165a:	430a      	orrs	r2, r1
    165c:	829a      	strh	r2, [r3, #20]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    165e:	a809      	add	r0, sp, #36	; 0x24
    1660:	2400      	movs	r4, #0
    1662:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1664:	2501      	movs	r5, #1
    1666:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1668:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    166a:	4b2a      	ldr	r3, [pc, #168]	; (1714 <system_clock_init+0x10c>)
    166c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    166e:	2006      	movs	r0, #6
    1670:	4e27      	ldr	r6, [pc, #156]	; (1710 <system_clock_init+0x108>)
    1672:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1674:	4b28      	ldr	r3, [pc, #160]	; (1718 <system_clock_init+0x110>)
    1676:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1678:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    167a:	466a      	mov	r2, sp
    167c:	7054      	strb	r4, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
    167e:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1680:	7254      	strb	r4, [r2, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(5, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1682:	2305      	movs	r3, #5
    1684:	7013      	strb	r3, [r2, #0]
    1686:	2001      	movs	r0, #1
    1688:	4669      	mov	r1, sp
    168a:	4b24      	ldr	r3, [pc, #144]	; (171c <system_clock_init+0x114>)
    168c:	4798      	blx	r3
    168e:	2001      	movs	r0, #1
    1690:	4b23      	ldr	r3, [pc, #140]	; (1720 <system_clock_init+0x118>)
    1692:	4798      	blx	r3
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
    1694:	a803      	add	r0, sp, #12
    1696:	7044      	strb	r4, [r0, #1]
	config->lock_bypass         = false;
    1698:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    169a:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    169c:	7104      	strb	r4, [r0, #4]

	config->output_frequency    = 48000000;
    169e:	4b21      	ldr	r3, [pc, #132]	; (1724 <system_clock_init+0x11c>)
    16a0:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
    16a2:	2380      	movs	r3, #128	; 0x80
    16a4:	021b      	lsls	r3, r3, #8
    16a6:	60c3      	str	r3, [r0, #12]
	config->reference_divider   = 1;
    16a8:	8205      	strh	r5, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_REF0;
    16aa:	7504      	strb	r4, [r0, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    16ac:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    16ae:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    16b0:	7004      	strb	r4, [r0, #0]
	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFEREMCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    16b2:	4b1d      	ldr	r3, [pc, #116]	; (1728 <system_clock_init+0x120>)
    16b4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    16b6:	2008      	movs	r0, #8
    16b8:	47b0      	blx	r6
		}
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    16ba:	4812      	ldr	r0, [pc, #72]	; (1704 <system_clock_init+0xfc>)
    16bc:	2150      	movs	r1, #80	; 0x50
    16be:	2203      	movs	r2, #3
    16c0:	5c43      	ldrb	r3, [r0, r1]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFEREMCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    16c2:	4013      	ands	r3, r2
    16c4:	2b03      	cmp	r3, #3
    16c6:	d1fb      	bne.n	16c0 <system_clock_init+0xb8>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    16c8:	4a0e      	ldr	r2, [pc, #56]	; (1704 <system_clock_init+0xfc>)
    16ca:	2344      	movs	r3, #68	; 0x44
    16cc:	5cd0      	ldrb	r0, [r2, r3]
    16ce:	2180      	movs	r1, #128	; 0x80
    16d0:	4249      	negs	r1, r1
    16d2:	4301      	orrs	r1, r0
    16d4:	54d1      	strb	r1, [r2, r3]
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    16d6:	4a15      	ldr	r2, [pc, #84]	; (172c <system_clock_init+0x124>)
    16d8:	2300      	movs	r3, #0
    16da:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    16dc:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    16de:	7293      	strb	r3, [r2, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    16e0:	2201      	movs	r2, #1
    16e2:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
    16e4:	466a      	mov	r2, sp
    16e6:	7053      	strb	r3, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
    16e8:	7213      	strb	r3, [r2, #8]
	config->output_enable      = false;
    16ea:	7253      	strb	r3, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    16ec:	2308      	movs	r3, #8
    16ee:	7013      	strb	r3, [r2, #0]
    16f0:	2000      	movs	r0, #0
    16f2:	4669      	mov	r1, sp
    16f4:	4b09      	ldr	r3, [pc, #36]	; (171c <system_clock_init+0x114>)
    16f6:	4798      	blx	r3
    16f8:	2000      	movs	r0, #0
    16fa:	4b09      	ldr	r3, [pc, #36]	; (1720 <system_clock_init+0x118>)
    16fc:	4798      	blx	r3
#endif
}
    16fe:	b00e      	add	sp, #56	; 0x38
    1700:	bd70      	pop	{r4, r5, r6, pc}
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	40000800 	.word	0x40000800
    1708:	41004000 	.word	0x41004000
    170c:	00001345 	.word	0x00001345
    1710:	00001499 	.word	0x00001499
    1714:	00001309 	.word	0x00001309
    1718:	00001731 	.word	0x00001731
    171c:	00001755 	.word	0x00001755
    1720:	00001809 	.word	0x00001809
    1724:	02dc6c00 	.word	0x02dc6c00
    1728:	000013f9 	.word	0x000013f9
    172c:	40000400 	.word	0x40000400

00001730 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1730:	4b06      	ldr	r3, [pc, #24]	; (174c <system_gclk_init+0x1c>)
    1732:	6999      	ldr	r1, [r3, #24]
    1734:	2208      	movs	r2, #8
    1736:	430a      	orrs	r2, r1
    1738:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    173a:	2201      	movs	r2, #1
    173c:	4b04      	ldr	r3, [pc, #16]	; (1750 <system_gclk_init+0x20>)
    173e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1740:	1c19      	adds	r1, r3, #0
    1742:	780b      	ldrb	r3, [r1, #0]
    1744:	4213      	tst	r3, r2
    1746:	d1fc      	bne.n	1742 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1748:	4770      	bx	lr
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	40000400 	.word	0x40000400
    1750:	40000c00 	.word	0x40000c00

00001754 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1756:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1758:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    175a:	780d      	ldrb	r5, [r1, #0]
    175c:	022d      	lsls	r5, r5, #8
    175e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1760:	784b      	ldrb	r3, [r1, #1]
    1762:	2b00      	cmp	r3, #0
    1764:	d002      	beq.n	176c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1766:	2380      	movs	r3, #128	; 0x80
    1768:	02db      	lsls	r3, r3, #11
    176a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    176c:	7a4b      	ldrb	r3, [r1, #9]
    176e:	2b00      	cmp	r3, #0
    1770:	d002      	beq.n	1778 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1772:	2380      	movs	r3, #128	; 0x80
    1774:	031b      	lsls	r3, r3, #12
    1776:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1778:	684c      	ldr	r4, [r1, #4]
    177a:	2c01      	cmp	r4, #1
    177c:	d917      	bls.n	17ae <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    177e:	1e63      	subs	r3, r4, #1
    1780:	421c      	tst	r4, r3
    1782:	d10f      	bne.n	17a4 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1784:	2c02      	cmp	r4, #2
    1786:	d906      	bls.n	1796 <system_gclk_gen_set_config+0x42>
    1788:	2302      	movs	r3, #2
    178a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    178c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    178e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1790:	429c      	cmp	r4, r3
    1792:	d8fb      	bhi.n	178c <system_gclk_gen_set_config+0x38>
    1794:	e000      	b.n	1798 <system_gclk_gen_set_config+0x44>
    1796:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1798:	0217      	lsls	r7, r2, #8
    179a:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    179c:	2380      	movs	r3, #128	; 0x80
    179e:	035b      	lsls	r3, r3, #13
    17a0:	431d      	orrs	r5, r3
    17a2:	e004      	b.n	17ae <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    17a4:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    17a6:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    17a8:	2380      	movs	r3, #128	; 0x80
    17aa:	029b      	lsls	r3, r3, #10
    17ac:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    17ae:	7a0b      	ldrb	r3, [r1, #8]
    17b0:	2b00      	cmp	r3, #0
    17b2:	d002      	beq.n	17ba <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    17b4:	2380      	movs	r3, #128	; 0x80
    17b6:	039b      	lsls	r3, r3, #14
    17b8:	431d      	orrs	r5, r3
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    17ba:	4a0f      	ldr	r2, [pc, #60]	; (17f8 <system_gclk_gen_set_config+0xa4>)
    17bc:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    17be:	b25b      	sxtb	r3, r3
    17c0:	2b00      	cmp	r3, #0
    17c2:	dbfb      	blt.n	17bc <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    17c4:	4b0d      	ldr	r3, [pc, #52]	; (17fc <system_gclk_gen_set_config+0xa8>)
    17c6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    17c8:	4b0d      	ldr	r3, [pc, #52]	; (1800 <system_gclk_gen_set_config+0xac>)
    17ca:	701e      	strb	r6, [r3, #0]
    17cc:	4a0a      	ldr	r2, [pc, #40]	; (17f8 <system_gclk_gen_set_config+0xa4>)
    17ce:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    17d0:	b25b      	sxtb	r3, r3
    17d2:	2b00      	cmp	r3, #0
    17d4:	dbfb      	blt.n	17ce <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    17d6:	4b08      	ldr	r3, [pc, #32]	; (17f8 <system_gclk_gen_set_config+0xa4>)
    17d8:	609f      	str	r7, [r3, #8]
    17da:	1c1a      	adds	r2, r3, #0
    17dc:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    17de:	b25b      	sxtb	r3, r3
    17e0:	2b00      	cmp	r3, #0
    17e2:	dbfb      	blt.n	17dc <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    17e4:	4b04      	ldr	r3, [pc, #16]	; (17f8 <system_gclk_gen_set_config+0xa4>)
    17e6:	6859      	ldr	r1, [r3, #4]
    17e8:	2280      	movs	r2, #128	; 0x80
    17ea:	0252      	lsls	r2, r2, #9
    17ec:	400a      	ands	r2, r1
    17ee:	4315      	orrs	r5, r2
    17f0:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    17f2:	4b04      	ldr	r3, [pc, #16]	; (1804 <system_gclk_gen_set_config+0xb0>)
    17f4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    17f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17f8:	40000c00 	.word	0x40000c00
    17fc:	00001211 	.word	0x00001211
    1800:	40000c08 	.word	0x40000c08
    1804:	0000124d 	.word	0x0000124d

00001808 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1808:	b510      	push	{r4, lr}
    180a:	1c04      	adds	r4, r0, #0
    180c:	4a0b      	ldr	r2, [pc, #44]	; (183c <system_gclk_gen_enable+0x34>)
    180e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1810:	b25b      	sxtb	r3, r3
    1812:	2b00      	cmp	r3, #0
    1814:	dbfb      	blt.n	180e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1816:	4b0a      	ldr	r3, [pc, #40]	; (1840 <system_gclk_gen_enable+0x38>)
    1818:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    181a:	4b0a      	ldr	r3, [pc, #40]	; (1844 <system_gclk_gen_enable+0x3c>)
    181c:	701c      	strb	r4, [r3, #0]
    181e:	4a07      	ldr	r2, [pc, #28]	; (183c <system_gclk_gen_enable+0x34>)
    1820:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1822:	b25b      	sxtb	r3, r3
    1824:	2b00      	cmp	r3, #0
    1826:	dbfb      	blt.n	1820 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1828:	4b04      	ldr	r3, [pc, #16]	; (183c <system_gclk_gen_enable+0x34>)
    182a:	6859      	ldr	r1, [r3, #4]
    182c:	2280      	movs	r2, #128	; 0x80
    182e:	0252      	lsls	r2, r2, #9
    1830:	430a      	orrs	r2, r1
    1832:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1834:	4b04      	ldr	r3, [pc, #16]	; (1848 <system_gclk_gen_enable+0x40>)
    1836:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1838:	bd10      	pop	{r4, pc}
    183a:	46c0      	nop			; (mov r8, r8)
    183c:	40000c00 	.word	0x40000c00
    1840:	00001211 	.word	0x00001211
    1844:	40000c04 	.word	0x40000c04
    1848:	0000124d 	.word	0x0000124d

0000184c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    184c:	b570      	push	{r4, r5, r6, lr}
    184e:	1c04      	adds	r4, r0, #0
    1850:	4a1a      	ldr	r2, [pc, #104]	; (18bc <system_gclk_gen_get_hz+0x70>)
    1852:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1854:	b25b      	sxtb	r3, r3
    1856:	2b00      	cmp	r3, #0
    1858:	dbfb      	blt.n	1852 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    185a:	4b19      	ldr	r3, [pc, #100]	; (18c0 <system_gclk_gen_get_hz+0x74>)
    185c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    185e:	4b19      	ldr	r3, [pc, #100]	; (18c4 <system_gclk_gen_get_hz+0x78>)
    1860:	701c      	strb	r4, [r3, #0]
    1862:	4a16      	ldr	r2, [pc, #88]	; (18bc <system_gclk_gen_get_hz+0x70>)
    1864:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1866:	b25b      	sxtb	r3, r3
    1868:	2b00      	cmp	r3, #0
    186a:	dbfb      	blt.n	1864 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    186c:	4e13      	ldr	r6, [pc, #76]	; (18bc <system_gclk_gen_get_hz+0x70>)
    186e:	6870      	ldr	r0, [r6, #4]
    1870:	04c0      	lsls	r0, r0, #19
    1872:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1874:	4b14      	ldr	r3, [pc, #80]	; (18c8 <system_gclk_gen_get_hz+0x7c>)
    1876:	4798      	blx	r3
    1878:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    187a:	4b12      	ldr	r3, [pc, #72]	; (18c4 <system_gclk_gen_get_hz+0x78>)
    187c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    187e:	6876      	ldr	r6, [r6, #4]
    1880:	02f6      	lsls	r6, r6, #11
    1882:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1884:	4b11      	ldr	r3, [pc, #68]	; (18cc <system_gclk_gen_get_hz+0x80>)
    1886:	701c      	strb	r4, [r3, #0]
    1888:	4a0c      	ldr	r2, [pc, #48]	; (18bc <system_gclk_gen_get_hz+0x70>)
    188a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    188c:	b25b      	sxtb	r3, r3
    188e:	2b00      	cmp	r3, #0
    1890:	dbfb      	blt.n	188a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1892:	4b0a      	ldr	r3, [pc, #40]	; (18bc <system_gclk_gen_get_hz+0x70>)
    1894:	689c      	ldr	r4, [r3, #8]
    1896:	0a24      	lsrs	r4, r4, #8
    1898:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    189a:	4b0d      	ldr	r3, [pc, #52]	; (18d0 <system_gclk_gen_get_hz+0x84>)
    189c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    189e:	2e00      	cmp	r6, #0
    18a0:	d107      	bne.n	18b2 <system_gclk_gen_get_hz+0x66>
    18a2:	2c01      	cmp	r4, #1
    18a4:	d907      	bls.n	18b6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    18a6:	1c28      	adds	r0, r5, #0
    18a8:	1c21      	adds	r1, r4, #0
    18aa:	4b0a      	ldr	r3, [pc, #40]	; (18d4 <system_gclk_gen_get_hz+0x88>)
    18ac:	4798      	blx	r3
    18ae:	1c05      	adds	r5, r0, #0
    18b0:	e001      	b.n	18b6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    18b2:	3401      	adds	r4, #1
    18b4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    18b6:	1c28      	adds	r0, r5, #0
    18b8:	bd70      	pop	{r4, r5, r6, pc}
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	40000c00 	.word	0x40000c00
    18c0:	00001211 	.word	0x00001211
    18c4:	40000c04 	.word	0x40000c04
    18c8:	00001279 	.word	0x00001279
    18cc:	40000c08 	.word	0x40000c08
    18d0:	0000124d 	.word	0x0000124d
    18d4:	00001c61 	.word	0x00001c61

000018d8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    18d8:	b510      	push	{r4, lr}
    18da:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    18dc:	4b06      	ldr	r3, [pc, #24]	; (18f8 <system_gclk_chan_enable+0x20>)
    18de:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    18e0:	4b06      	ldr	r3, [pc, #24]	; (18fc <system_gclk_chan_enable+0x24>)
    18e2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    18e4:	4b06      	ldr	r3, [pc, #24]	; (1900 <system_gclk_chan_enable+0x28>)
    18e6:	8859      	ldrh	r1, [r3, #2]
    18e8:	2280      	movs	r2, #128	; 0x80
    18ea:	01d2      	lsls	r2, r2, #7
    18ec:	430a      	orrs	r2, r1
    18ee:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    18f0:	4b04      	ldr	r3, [pc, #16]	; (1904 <system_gclk_chan_enable+0x2c>)
    18f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    18f4:	bd10      	pop	{r4, pc}
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	00001211 	.word	0x00001211
    18fc:	40000c02 	.word	0x40000c02
    1900:	40000c00 	.word	0x40000c00
    1904:	0000124d 	.word	0x0000124d

00001908 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1908:	b510      	push	{r4, lr}
    190a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    190c:	4b0f      	ldr	r3, [pc, #60]	; (194c <system_gclk_chan_disable+0x44>)
    190e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1910:	4b0f      	ldr	r3, [pc, #60]	; (1950 <system_gclk_chan_disable+0x48>)
    1912:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1914:	4b0f      	ldr	r3, [pc, #60]	; (1954 <system_gclk_chan_disable+0x4c>)
    1916:	8858      	ldrh	r0, [r3, #2]
    1918:	0500      	lsls	r0, r0, #20
    191a:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    191c:	8859      	ldrh	r1, [r3, #2]
    191e:	4a0e      	ldr	r2, [pc, #56]	; (1958 <system_gclk_chan_disable+0x50>)
    1920:	400a      	ands	r2, r1
    1922:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1924:	8859      	ldrh	r1, [r3, #2]
    1926:	4a0d      	ldr	r2, [pc, #52]	; (195c <system_gclk_chan_disable+0x54>)
    1928:	400a      	ands	r2, r1
    192a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    192c:	1c19      	adds	r1, r3, #0
    192e:	2280      	movs	r2, #128	; 0x80
    1930:	01d2      	lsls	r2, r2, #7
    1932:	884b      	ldrh	r3, [r1, #2]
    1934:	4213      	tst	r3, r2
    1936:	d1fc      	bne.n	1932 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1938:	4b06      	ldr	r3, [pc, #24]	; (1954 <system_gclk_chan_disable+0x4c>)
    193a:	0201      	lsls	r1, r0, #8
    193c:	8858      	ldrh	r0, [r3, #2]
    193e:	4a06      	ldr	r2, [pc, #24]	; (1958 <system_gclk_chan_disable+0x50>)
    1940:	4002      	ands	r2, r0
    1942:	430a      	orrs	r2, r1
    1944:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1946:	4b06      	ldr	r3, [pc, #24]	; (1960 <system_gclk_chan_disable+0x58>)
    1948:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    194a:	bd10      	pop	{r4, pc}
    194c:	00001211 	.word	0x00001211
    1950:	40000c02 	.word	0x40000c02
    1954:	40000c00 	.word	0x40000c00
    1958:	fffff0ff 	.word	0xfffff0ff
    195c:	ffffbfff 	.word	0xffffbfff
    1960:	0000124d 	.word	0x0000124d

00001964 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1964:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1966:	780c      	ldrb	r4, [r1, #0]
    1968:	0224      	lsls	r4, r4, #8
    196a:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    196c:	4b02      	ldr	r3, [pc, #8]	; (1978 <system_gclk_chan_set_config+0x14>)
    196e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1970:	b2a4      	uxth	r4, r4
    1972:	4b02      	ldr	r3, [pc, #8]	; (197c <system_gclk_chan_set_config+0x18>)
    1974:	805c      	strh	r4, [r3, #2]
}
    1976:	bd10      	pop	{r4, pc}
    1978:	00001909 	.word	0x00001909
    197c:	40000c00 	.word	0x40000c00

00001980 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1980:	b510      	push	{r4, lr}
    1982:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1984:	4b06      	ldr	r3, [pc, #24]	; (19a0 <system_gclk_chan_get_hz+0x20>)
    1986:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1988:	4b06      	ldr	r3, [pc, #24]	; (19a4 <system_gclk_chan_get_hz+0x24>)
    198a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    198c:	4b06      	ldr	r3, [pc, #24]	; (19a8 <system_gclk_chan_get_hz+0x28>)
    198e:	885c      	ldrh	r4, [r3, #2]
    1990:	0524      	lsls	r4, r4, #20
    1992:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1994:	4b05      	ldr	r3, [pc, #20]	; (19ac <system_gclk_chan_get_hz+0x2c>)
    1996:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1998:	1c20      	adds	r0, r4, #0
    199a:	4b05      	ldr	r3, [pc, #20]	; (19b0 <system_gclk_chan_get_hz+0x30>)
    199c:	4798      	blx	r3
}
    199e:	bd10      	pop	{r4, pc}
    19a0:	00001211 	.word	0x00001211
    19a4:	40000c02 	.word	0x40000c02
    19a8:	40000c00 	.word	0x40000c00
    19ac:	0000124d 	.word	0x0000124d
    19b0:	0000184d 	.word	0x0000184d

000019b4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    19b4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    19b6:	78d4      	ldrb	r4, [r2, #3]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    19b8:	2300      	movs	r3, #0

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    19ba:	2c00      	cmp	r4, #0
    19bc:	d11d      	bne.n	19fa <_system_pinmux_config+0x46>
		/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
		 * be written later) and store the new mux mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    19be:	7813      	ldrb	r3, [r2, #0]
    19c0:	2b80      	cmp	r3, #128	; 0x80
    19c2:	d004      	beq.n	19ce <_system_pinmux_config+0x1a>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    19c4:	061b      	lsls	r3, r3, #24
    19c6:	2480      	movs	r4, #128	; 0x80
    19c8:	0264      	lsls	r4, r4, #9
    19ca:	4323      	orrs	r3, r4
    19cc:	e000      	b.n	19d0 <_system_pinmux_config+0x1c>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    19ce:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    19d0:	7854      	ldrb	r4, [r2, #1]
    19d2:	2502      	movs	r5, #2
    19d4:	43ac      	bics	r4, r5
    19d6:	d10a      	bne.n	19ee <_system_pinmux_config+0x3a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    19d8:	7894      	ldrb	r4, [r2, #2]
    19da:	2c00      	cmp	r4, #0
    19dc:	d103      	bne.n	19e6 <_system_pinmux_config+0x32>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    19de:	2480      	movs	r4, #128	; 0x80
    19e0:	02a4      	lsls	r4, r4, #10
    19e2:	4323      	orrs	r3, r4
    19e4:	e002      	b.n	19ec <_system_pinmux_config+0x38>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    19e6:	24c0      	movs	r4, #192	; 0xc0
    19e8:	02e4      	lsls	r4, r4, #11
    19ea:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    19ec:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    19ee:	7854      	ldrb	r4, [r2, #1]
    19f0:	3c01      	subs	r4, #1
    19f2:	2c01      	cmp	r4, #1
    19f4:	d801      	bhi.n	19fa <_system_pinmux_config+0x46>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    19f6:	4c10      	ldr	r4, [pc, #64]	; (1a38 <_system_pinmux_config+0x84>)
    19f8:	4023      	ands	r3, r4
		}
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    19fa:	040d      	lsls	r5, r1, #16
    19fc:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    19fe:	24a0      	movs	r4, #160	; 0xa0
    1a00:	05e4      	lsls	r4, r4, #23
    1a02:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a04:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a06:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a08:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a0a:	24d0      	movs	r4, #208	; 0xd0
    1a0c:	0624      	lsls	r4, r4, #24
    1a0e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a10:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a12:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1a14:	78d4      	ldrb	r4, [r2, #3]
    1a16:	2c00      	cmp	r4, #0
    1a18:	d10c      	bne.n	1a34 <_system_pinmux_config+0x80>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1a1a:	035c      	lsls	r4, r3, #13
    1a1c:	d505      	bpl.n	1a2a <_system_pinmux_config+0x76>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1a1e:	7893      	ldrb	r3, [r2, #2]
    1a20:	2b01      	cmp	r3, #1
    1a22:	d101      	bne.n	1a28 <_system_pinmux_config+0x74>
				port->OUTSET.reg = pin_mask;
    1a24:	6181      	str	r1, [r0, #24]
    1a26:	e000      	b.n	1a2a <_system_pinmux_config+0x76>
			} else {
				port->OUTCLR.reg = pin_mask;
    1a28:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a2a:	7853      	ldrb	r3, [r2, #1]
    1a2c:	3b01      	subs	r3, #1
    1a2e:	2b01      	cmp	r3, #1
    1a30:	d800      	bhi.n	1a34 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1a32:	6081      	str	r1, [r0, #8]
		}
	}
}
    1a34:	bd30      	pop	{r4, r5, pc}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	fffbffff 	.word	0xfffbffff

00001a3c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1a3c:	b508      	push	{r3, lr}
    1a3e:	1c03      	adds	r3, r0, #0
    1a40:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a42:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1a44:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a46:	2900      	cmp	r1, #0
    1a48:	d103      	bne.n	1a52 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1a4a:	0958      	lsrs	r0, r3, #5
    1a4c:	01c0      	lsls	r0, r0, #7
    1a4e:	4904      	ldr	r1, [pc, #16]	; (1a60 <system_pinmux_pin_set_config+0x24>)
    1a50:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1a52:	211f      	movs	r1, #31
    1a54:	400b      	ands	r3, r1
    1a56:	2101      	movs	r1, #1
    1a58:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1a5a:	4b02      	ldr	r3, [pc, #8]	; (1a64 <system_pinmux_pin_set_config+0x28>)
    1a5c:	4798      	blx	r3
}
    1a5e:	bd08      	pop	{r3, pc}
    1a60:	41004400 	.word	0x41004400
    1a64:	000019b5 	.word	0x000019b5

00001a68 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1a68:	4770      	bx	lr
    1a6a:	46c0      	nop			; (mov r8, r8)

00001a6c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1a6c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1a6e:	4b04      	ldr	r3, [pc, #16]	; (1a80 <system_init+0x14>)
    1a70:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1a72:	4b04      	ldr	r3, [pc, #16]	; (1a84 <system_init+0x18>)
    1a74:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1a76:	4b04      	ldr	r3, [pc, #16]	; (1a88 <system_init+0x1c>)
    1a78:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1a7a:	4b04      	ldr	r3, [pc, #16]	; (1a8c <system_init+0x20>)
    1a7c:	4798      	blx	r3
}
    1a7e:	bd08      	pop	{r3, pc}
    1a80:	00001609 	.word	0x00001609
    1a84:	00001a69 	.word	0x00001a69
    1a88:	00001a69 	.word	0x00001a69
    1a8c:	00001a69 	.word	0x00001a69

00001a90 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1a90:	e7fe      	b.n	1a90 <Dummy_Handler>
    1a92:	46c0      	nop			; (mov r8, r8)

00001a94 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1a94:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1a96:	4b19      	ldr	r3, [pc, #100]	; (1afc <Reset_Handler+0x68>)
    1a98:	4a19      	ldr	r2, [pc, #100]	; (1b00 <Reset_Handler+0x6c>)
    1a9a:	429a      	cmp	r2, r3
    1a9c:	d003      	beq.n	1aa6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1a9e:	4b19      	ldr	r3, [pc, #100]	; (1b04 <Reset_Handler+0x70>)
    1aa0:	4a16      	ldr	r2, [pc, #88]	; (1afc <Reset_Handler+0x68>)
    1aa2:	429a      	cmp	r2, r3
    1aa4:	d304      	bcc.n	1ab0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1aa6:	4b18      	ldr	r3, [pc, #96]	; (1b08 <Reset_Handler+0x74>)
    1aa8:	4a18      	ldr	r2, [pc, #96]	; (1b0c <Reset_Handler+0x78>)
    1aaa:	429a      	cmp	r2, r3
    1aac:	d310      	bcc.n	1ad0 <Reset_Handler+0x3c>
    1aae:	e01b      	b.n	1ae8 <Reset_Handler+0x54>
    1ab0:	4b17      	ldr	r3, [pc, #92]	; (1b10 <Reset_Handler+0x7c>)
    1ab2:	4814      	ldr	r0, [pc, #80]	; (1b04 <Reset_Handler+0x70>)
    1ab4:	3003      	adds	r0, #3
    1ab6:	1ac0      	subs	r0, r0, r3
    1ab8:	0880      	lsrs	r0, r0, #2
    1aba:	3001      	adds	r0, #1
    1abc:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1abe:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    1ac0:	490e      	ldr	r1, [pc, #56]	; (1afc <Reset_Handler+0x68>)
    1ac2:	4a0f      	ldr	r2, [pc, #60]	; (1b00 <Reset_Handler+0x6c>)
    1ac4:	58d4      	ldr	r4, [r2, r3]
    1ac6:	50cc      	str	r4, [r1, r3]
    1ac8:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1aca:	4283      	cmp	r3, r0
    1acc:	d1fa      	bne.n	1ac4 <Reset_Handler+0x30>
    1ace:	e7ea      	b.n	1aa6 <Reset_Handler+0x12>
    1ad0:	4b0e      	ldr	r3, [pc, #56]	; (1b0c <Reset_Handler+0x78>)
    1ad2:	1d1a      	adds	r2, r3, #4
    1ad4:	490c      	ldr	r1, [pc, #48]	; (1b08 <Reset_Handler+0x74>)
    1ad6:	3103      	adds	r1, #3
    1ad8:	1a89      	subs	r1, r1, r2
    1ada:	0889      	lsrs	r1, r1, #2
    1adc:	0089      	lsls	r1, r1, #2
    1ade:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    1ae0:	2100      	movs	r1, #0
    1ae2:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1ae4:	4293      	cmp	r3, r2
    1ae6:	d1fc      	bne.n	1ae2 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1ae8:	4b0a      	ldr	r3, [pc, #40]	; (1b14 <Reset_Handler+0x80>)
    1aea:	21ff      	movs	r1, #255	; 0xff
    1aec:	4a0a      	ldr	r2, [pc, #40]	; (1b18 <Reset_Handler+0x84>)
    1aee:	438a      	bics	r2, r1
    1af0:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    1af2:	4b0a      	ldr	r3, [pc, #40]	; (1b1c <Reset_Handler+0x88>)
    1af4:	4798      	blx	r3

        /* Branch to main function */
        main();
    1af6:	4b0a      	ldr	r3, [pc, #40]	; (1b20 <Reset_Handler+0x8c>)
    1af8:	4798      	blx	r3
    1afa:	e7fe      	b.n	1afa <Reset_Handler+0x66>
    1afc:	20000000 	.word	0x20000000
    1b00:	00001e4c 	.word	0x00001e4c
    1b04:	20000014 	.word	0x20000014
    1b08:	20000118 	.word	0x20000118
    1b0c:	20000014 	.word	0x20000014
    1b10:	20000004 	.word	0x20000004
    1b14:	e000ed00 	.word	0xe000ed00
    1b18:	00000000 	.word	0x00000000
    1b1c:	00001d01 	.word	0x00001d01
    1b20:	00001b4d 	.word	0x00001b4d

00001b24 <tcc_callback_function>:

//////////////////////////////////////////////////////////////////////////
//	TCC Callback Function
//		-> This function only toggles the LED when TCC is triggered
static void tcc_callback_function( struct tcc_module *const module_instance ) {
	if ( inProgress ) {
    1b24:	4b08      	ldr	r3, [pc, #32]	; (1b48 <tcc_callback_function+0x24>)
    1b26:	781b      	ldrb	r3, [r3, #0]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d00c      	beq.n	1b46 <tcc_callback_function+0x22>
		intProgressTimer--;
    1b2c:	4b06      	ldr	r3, [pc, #24]	; (1b48 <tcc_callback_function+0x24>)
    1b2e:	785a      	ldrb	r2, [r3, #1]
    1b30:	3a01      	subs	r2, #1
    1b32:	b2d2      	uxtb	r2, r2
    1b34:	705a      	strb	r2, [r3, #1]
		
		if ( intProgressTimer == 0 ) {
    1b36:	785b      	ldrb	r3, [r3, #1]
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d104      	bne.n	1b46 <tcc_callback_function+0x22>
			inProgress = false;
    1b3c:	4b02      	ldr	r3, [pc, #8]	; (1b48 <tcc_callback_function+0x24>)
    1b3e:	2200      	movs	r2, #0
    1b40:	701a      	strb	r2, [r3, #0]
			intProgressTimer = 0xFF;
    1b42:	22ff      	movs	r2, #255	; 0xff
    1b44:	705a      	strb	r2, [r3, #1]
		}
	}
}
    1b46:	4770      	bx	lr
    1b48:	20000074 	.word	0x20000074

00001b4c <main>:
volatile bool isInTransaction =  false;
volatile bool inProgress = false;
volatile uint8_t intProgressTimer = 0;

int main (void)
{
    1b4c:	b570      	push	{r4, r5, r6, lr}
    1b4e:	b0aa      	sub	sp, #168	; 0xa8
	system_init();
    1b50:	4b30      	ldr	r3, [pc, #192]	; (1c14 <main+0xc8>)
    1b52:	4798      	blx	r3
	
	while ( !system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL) ) {
    1b54:	4c30      	ldr	r4, [pc, #192]	; (1c18 <main+0xcc>)
    1b56:	2008      	movs	r0, #8
    1b58:	47a0      	blx	r4
    1b5a:	2800      	cmp	r0, #0
    1b5c:	d0fb      	beq.n	1b56 <main+0xa>
	
	// Disable the pin select for the CAN Controller
	fnc_can_controller_disable();
	
	// Perform the SERCOM configuration for this board
	bastian_complete_sercom_setup();
    1b5e:	4b2f      	ldr	r3, [pc, #188]	; (1c1c <main+0xd0>)
    1b60:	4798      	blx	r3
//
//	TCC Configuration Function
static void tcc_configure_function(void){
	struct tcc_config config_tcc;	// Configuration structure
	
	tcc_get_config_defaults(&config_tcc, TCC0);	// Initialize with known values
    1b62:	ac01      	add	r4, sp, #4
    1b64:	4e2e      	ldr	r6, [pc, #184]	; (1c20 <main+0xd4>)
    1b66:	1c20      	adds	r0, r4, #0
    1b68:	1c31      	adds	r1, r6, #0
    1b6a:	4b2e      	ldr	r3, [pc, #184]	; (1c24 <main+0xd8>)
    1b6c:	4798      	blx	r3
	
	// Custom Counter Configuration
	config_tcc.counter.clock_source = GCLK_GENERATOR_0;
    1b6e:	2300      	movs	r3, #0
    1b70:	72a3      	strb	r3, [r4, #10]
	//config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV1024;
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    1b72:	2305      	movs	r3, #5
    1b74:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period = 750UL;
    1b76:	4b2c      	ldr	r3, [pc, #176]	; (1c28 <main+0xdc>)
    1b78:	6063      	str	r3, [r4, #4]
	
	tcc_init(&tcc_instance, TCC0, &config_tcc);	// Commit Counter Configuration
    1b7a:	4d2c      	ldr	r5, [pc, #176]	; (1c2c <main+0xe0>)
    1b7c:	1c28      	adds	r0, r5, #0
    1b7e:	1c31      	adds	r1, r6, #0
    1b80:	1c22      	adds	r2, r4, #0
    1b82:	4b2b      	ldr	r3, [pc, #172]	; (1c30 <main+0xe4>)
    1b84:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    1b86:	682b      	ldr	r3, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    1b88:	2202      	movs	r2, #2
    1b8a:	6899      	ldr	r1, [r3, #8]
    1b8c:	420a      	tst	r2, r1
    1b8e:	d1fc      	bne.n	1b8a <main+0x3e>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1b90:	6819      	ldr	r1, [r3, #0]
    1b92:	2202      	movs	r2, #2
    1b94:	430a      	orrs	r2, r1
    1b96:	601a      	str	r2, [r3, #0]
}
//
//	TCC Callback Configuration
static void tcc_callback_configuration(void){
	// Register the address to the function that is to be used when counter overflows
	tcc_register_callback(&tcc_instance, tcc_callback_function, TCC_CALLBACK_OVERFLOW);
    1b98:	4c24      	ldr	r4, [pc, #144]	; (1c2c <main+0xe0>)
    1b9a:	1c20      	adds	r0, r4, #0
    1b9c:	4925      	ldr	r1, [pc, #148]	; (1c34 <main+0xe8>)
    1b9e:	2200      	movs	r2, #0
    1ba0:	4b25      	ldr	r3, [pc, #148]	; (1c38 <main+0xec>)
    1ba2:	4798      	blx	r3
	
	// Enable this callback entry
	tcc_enable_callback(&tcc_instance, TCC_CALLBACK_OVERFLOW);
    1ba4:	1c20      	adds	r0, r4, #0
    1ba6:	2100      	movs	r1, #0
    1ba8:	4b24      	ldr	r3, [pc, #144]	; (1c3c <main+0xf0>)
    1baa:	4798      	blx	r3
	
	
	
	
	// Select Slave
	spi_select_slave(&spi_master, &spi_shield, false);
    1bac:	4824      	ldr	r0, [pc, #144]	; (1c40 <main+0xf4>)
    1bae:	4925      	ldr	r1, [pc, #148]	; (1c44 <main+0xf8>)
    1bb0:	2200      	movs	r2, #0
    1bb2:	4b25      	ldr	r3, [pc, #148]	; (1c48 <main+0xfc>)
    1bb4:	4798      	blx	r3
	
	// Wait the necessary time for the chip to restart
	inProgress = true;
    1bb6:	4b25      	ldr	r3, [pc, #148]	; (1c4c <main+0x100>)
    1bb8:	2201      	movs	r2, #1
    1bba:	701a      	strb	r2, [r3, #0]
	intProgressTimer = 100;	// wait for 11ms
    1bbc:	2264      	movs	r2, #100	; 0x64
    1bbe:	705a      	strb	r2, [r3, #1]
	while ( inProgress ) { }
    1bc0:	781a      	ldrb	r2, [r3, #0]
    1bc2:	2a00      	cmp	r2, #0
    1bc4:	d1fc      	bne.n	1bc0 <main+0x74>
	
	// Read the status from the on-board CAN controller
	spi_select_slave(&spi_master, &spi_CAN_controller, true);
    1bc6:	4c1e      	ldr	r4, [pc, #120]	; (1c40 <main+0xf4>)
    1bc8:	4e21      	ldr	r6, [pc, #132]	; (1c50 <main+0x104>)
    1bca:	1c20      	adds	r0, r4, #0
    1bcc:	1c31      	adds	r1, r6, #0
    1bce:	2201      	movs	r2, #1
    1bd0:	4d1d      	ldr	r5, [pc, #116]	; (1c48 <main+0xfc>)
    1bd2:	47a8      	blx	r5
	spi_write_buffer_wait(&spi_master, wr_can_buffer_startup, SYSTEM_SLAVE_TX_SINGLE_BYTE);
    1bd4:	1c20      	adds	r0, r4, #0
    1bd6:	491f      	ldr	r1, [pc, #124]	; (1c54 <main+0x108>)
    1bd8:	2201      	movs	r2, #1
    1bda:	4b1f      	ldr	r3, [pc, #124]	; (1c58 <main+0x10c>)
    1bdc:	4798      	blx	r3
	spi_select_slave(&spi_master, &spi_CAN_controller, false);
    1bde:	1c20      	adds	r0, r4, #0
    1be0:	1c31      	adds	r1, r6, #0
    1be2:	2200      	movs	r2, #0
    1be4:	47a8      	blx	r5
	
	// Wait the necessary time for the chip to restart
	inProgress = true;
    1be6:	4b19      	ldr	r3, [pc, #100]	; (1c4c <main+0x100>)
    1be8:	2201      	movs	r2, #1
    1bea:	701a      	strb	r2, [r3, #0]
	intProgressTimer = 50;	// wait for 11ms
    1bec:	2232      	movs	r2, #50	; 0x32
    1bee:	705a      	strb	r2, [r3, #1]
	while ( inProgress ) { }
    1bf0:	781a      	ldrb	r2, [r3, #0]
    1bf2:	2a00      	cmp	r2, #0
    1bf4:	d1fc      	bne.n	1bf0 <main+0xa4>
	
	spi_select_slave(&spi_master, &spi_CAN_controller, true);
    1bf6:	4c12      	ldr	r4, [pc, #72]	; (1c40 <main+0xf4>)
    1bf8:	1c20      	adds	r0, r4, #0
    1bfa:	4915      	ldr	r1, [pc, #84]	; (1c50 <main+0x104>)
    1bfc:	2201      	movs	r2, #1
    1bfe:	4b12      	ldr	r3, [pc, #72]	; (1c48 <main+0xfc>)
    1c00:	4798      	blx	r3
	spi_transceive_buffer_job(&spi_master, &wr_can_buffer_startup[1], rd_buffer, SYSTEM_SLAVE_STATUS_TRANSACTION_LENGTH);
    1c02:	1c20      	adds	r0, r4, #0
    1c04:	4913      	ldr	r1, [pc, #76]	; (1c54 <main+0x108>)
    1c06:	3101      	adds	r1, #1
    1c08:	4a10      	ldr	r2, [pc, #64]	; (1c4c <main+0x100>)
    1c0a:	3204      	adds	r2, #4
    1c0c:	2303      	movs	r3, #3
    1c0e:	4c13      	ldr	r4, [pc, #76]	; (1c5c <main+0x110>)
    1c10:	47a0      	blx	r4
    1c12:	e7fe      	b.n	1c12 <main+0xc6>
    1c14:	00001a6d 	.word	0x00001a6d
    1c18:	000015b5 	.word	0x000015b5
    1c1c:	000003d1 	.word	0x000003d1
    1c20:	42001400 	.word	0x42001400
    1c24:	00000c3d 	.word	0x00000c3d
    1c28:	000002ee 	.word	0x000002ee
    1c2c:	200000d8 	.word	0x200000d8
    1c30:	00000d79 	.word	0x00000d79
    1c34:	00001b25 	.word	0x00001b25
    1c38:	0000116d 	.word	0x0000116d
    1c3c:	00001185 	.word	0x00001185
    1c40:	20000084 	.word	0x20000084
    1c44:	200000c0 	.word	0x200000c0
    1c48:	000005e9 	.word	0x000005e9
    1c4c:	20000074 	.word	0x20000074
    1c50:	200000c4 	.word	0x200000c4
    1c54:	20000004 	.word	0x20000004
    1c58:	000006d5 	.word	0x000006d5
    1c5c:	00000965 	.word	0x00000965

00001c60 <__aeabi_uidiv>:
    1c60:	2900      	cmp	r1, #0
    1c62:	d034      	beq.n	1cce <.udivsi3_skip_div0_test+0x6a>

00001c64 <.udivsi3_skip_div0_test>:
    1c64:	2301      	movs	r3, #1
    1c66:	2200      	movs	r2, #0
    1c68:	b410      	push	{r4}
    1c6a:	4288      	cmp	r0, r1
    1c6c:	d32c      	bcc.n	1cc8 <.udivsi3_skip_div0_test+0x64>
    1c6e:	2401      	movs	r4, #1
    1c70:	0724      	lsls	r4, r4, #28
    1c72:	42a1      	cmp	r1, r4
    1c74:	d204      	bcs.n	1c80 <.udivsi3_skip_div0_test+0x1c>
    1c76:	4281      	cmp	r1, r0
    1c78:	d202      	bcs.n	1c80 <.udivsi3_skip_div0_test+0x1c>
    1c7a:	0109      	lsls	r1, r1, #4
    1c7c:	011b      	lsls	r3, r3, #4
    1c7e:	e7f8      	b.n	1c72 <.udivsi3_skip_div0_test+0xe>
    1c80:	00e4      	lsls	r4, r4, #3
    1c82:	42a1      	cmp	r1, r4
    1c84:	d204      	bcs.n	1c90 <.udivsi3_skip_div0_test+0x2c>
    1c86:	4281      	cmp	r1, r0
    1c88:	d202      	bcs.n	1c90 <.udivsi3_skip_div0_test+0x2c>
    1c8a:	0049      	lsls	r1, r1, #1
    1c8c:	005b      	lsls	r3, r3, #1
    1c8e:	e7f8      	b.n	1c82 <.udivsi3_skip_div0_test+0x1e>
    1c90:	4288      	cmp	r0, r1
    1c92:	d301      	bcc.n	1c98 <.udivsi3_skip_div0_test+0x34>
    1c94:	1a40      	subs	r0, r0, r1
    1c96:	431a      	orrs	r2, r3
    1c98:	084c      	lsrs	r4, r1, #1
    1c9a:	42a0      	cmp	r0, r4
    1c9c:	d302      	bcc.n	1ca4 <.udivsi3_skip_div0_test+0x40>
    1c9e:	1b00      	subs	r0, r0, r4
    1ca0:	085c      	lsrs	r4, r3, #1
    1ca2:	4322      	orrs	r2, r4
    1ca4:	088c      	lsrs	r4, r1, #2
    1ca6:	42a0      	cmp	r0, r4
    1ca8:	d302      	bcc.n	1cb0 <.udivsi3_skip_div0_test+0x4c>
    1caa:	1b00      	subs	r0, r0, r4
    1cac:	089c      	lsrs	r4, r3, #2
    1cae:	4322      	orrs	r2, r4
    1cb0:	08cc      	lsrs	r4, r1, #3
    1cb2:	42a0      	cmp	r0, r4
    1cb4:	d302      	bcc.n	1cbc <.udivsi3_skip_div0_test+0x58>
    1cb6:	1b00      	subs	r0, r0, r4
    1cb8:	08dc      	lsrs	r4, r3, #3
    1cba:	4322      	orrs	r2, r4
    1cbc:	2800      	cmp	r0, #0
    1cbe:	d003      	beq.n	1cc8 <.udivsi3_skip_div0_test+0x64>
    1cc0:	091b      	lsrs	r3, r3, #4
    1cc2:	d001      	beq.n	1cc8 <.udivsi3_skip_div0_test+0x64>
    1cc4:	0909      	lsrs	r1, r1, #4
    1cc6:	e7e3      	b.n	1c90 <.udivsi3_skip_div0_test+0x2c>
    1cc8:	1c10      	adds	r0, r2, #0
    1cca:	bc10      	pop	{r4}
    1ccc:	4770      	bx	lr
    1cce:	2800      	cmp	r0, #0
    1cd0:	d001      	beq.n	1cd6 <.udivsi3_skip_div0_test+0x72>
    1cd2:	2000      	movs	r0, #0
    1cd4:	43c0      	mvns	r0, r0
    1cd6:	b407      	push	{r0, r1, r2}
    1cd8:	4802      	ldr	r0, [pc, #8]	; (1ce4 <.udivsi3_skip_div0_test+0x80>)
    1cda:	a102      	add	r1, pc, #8	; (adr r1, 1ce4 <.udivsi3_skip_div0_test+0x80>)
    1cdc:	1840      	adds	r0, r0, r1
    1cde:	9002      	str	r0, [sp, #8]
    1ce0:	bd03      	pop	{r0, r1, pc}
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	00000019 	.word	0x00000019

00001ce8 <__aeabi_uidivmod>:
    1ce8:	2900      	cmp	r1, #0
    1cea:	d0f0      	beq.n	1cce <.udivsi3_skip_div0_test+0x6a>
    1cec:	b503      	push	{r0, r1, lr}
    1cee:	f7ff ffb9 	bl	1c64 <.udivsi3_skip_div0_test>
    1cf2:	bc0e      	pop	{r1, r2, r3}
    1cf4:	4342      	muls	r2, r0
    1cf6:	1a89      	subs	r1, r1, r2
    1cf8:	4718      	bx	r3
    1cfa:	46c0      	nop			; (mov r8, r8)

00001cfc <__aeabi_idiv0>:
    1cfc:	4770      	bx	lr
    1cfe:	46c0      	nop			; (mov r8, r8)

00001d00 <__libc_init_array>:
    1d00:	b570      	push	{r4, r5, r6, lr}
    1d02:	4b0e      	ldr	r3, [pc, #56]	; (1d3c <__libc_init_array+0x3c>)
    1d04:	4d0e      	ldr	r5, [pc, #56]	; (1d40 <__libc_init_array+0x40>)
    1d06:	2400      	movs	r4, #0
    1d08:	1aed      	subs	r5, r5, r3
    1d0a:	10ad      	asrs	r5, r5, #2
    1d0c:	1c1e      	adds	r6, r3, #0
    1d0e:	42ac      	cmp	r4, r5
    1d10:	d004      	beq.n	1d1c <__libc_init_array+0x1c>
    1d12:	00a3      	lsls	r3, r4, #2
    1d14:	58f3      	ldr	r3, [r6, r3]
    1d16:	4798      	blx	r3
    1d18:	3401      	adds	r4, #1
    1d1a:	e7f8      	b.n	1d0e <__libc_init_array+0xe>
    1d1c:	f000 f886 	bl	1e2c <_init>
    1d20:	4b08      	ldr	r3, [pc, #32]	; (1d44 <__libc_init_array+0x44>)
    1d22:	4d09      	ldr	r5, [pc, #36]	; (1d48 <__libc_init_array+0x48>)
    1d24:	2400      	movs	r4, #0
    1d26:	1aed      	subs	r5, r5, r3
    1d28:	10ad      	asrs	r5, r5, #2
    1d2a:	1c1e      	adds	r6, r3, #0
    1d2c:	42ac      	cmp	r4, r5
    1d2e:	d004      	beq.n	1d3a <__libc_init_array+0x3a>
    1d30:	00a3      	lsls	r3, r4, #2
    1d32:	58f3      	ldr	r3, [r6, r3]
    1d34:	4798      	blx	r3
    1d36:	3401      	adds	r4, #1
    1d38:	e7f8      	b.n	1d2c <__libc_init_array+0x2c>
    1d3a:	bd70      	pop	{r4, r5, r6, pc}
    1d3c:	00001e38 	.word	0x00001e38
    1d40:	00001e38 	.word	0x00001e38
    1d44:	00001e38 	.word	0x00001e38
    1d48:	00001e3c 	.word	0x00001e3c

00001d4c <memcpy>:
    1d4c:	b510      	push	{r4, lr}
    1d4e:	2300      	movs	r3, #0
    1d50:	4293      	cmp	r3, r2
    1d52:	d003      	beq.n	1d5c <memcpy+0x10>
    1d54:	5ccc      	ldrb	r4, [r1, r3]
    1d56:	54c4      	strb	r4, [r0, r3]
    1d58:	3301      	adds	r3, #1
    1d5a:	e7f9      	b.n	1d50 <memcpy+0x4>
    1d5c:	bd10      	pop	{r4, pc}
    1d5e:	0000      	movs	r0, r0
    1d60:	42000800 	.word	0x42000800
    1d64:	42000c00 	.word	0x42000c00
    1d68:	00000a09 	.word	0x00000a09

00001d6c <_tcc_intflag>:
    1d6c:	00000001 00000002 00000004 00000008     ................
    1d7c:	00001000 00002000 00004000 00008000     ..... ...@......
    1d8c:	00010000 00020000 00040000 00080000     ................
    1d9c:	0000128c 000012e8 000012e8 00001286     ................
    1dac:	00001286 000012a2 00001292 000012a8     ................
    1dbc:	000012d6 000014c4 00001524 00001524     ........$...$...
    1dcc:	000014a4 000014b6 000014d2 000014a8     ................
    1ddc:	000014e0 00001514 00001560 000015a2     ........`.......
    1dec:	000015a2 000015a2 00001552 0000156e     ........R...n...
    1dfc:	00001544 0000157c 00001592 000015c4     D...|...........
    1e0c:	000015fa 000015fa 000015c0 000015e8     ................
    1e1c:	000015c8 000015e4 000015cc 000015d0     ................

00001e2c <_init>:
    1e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e2e:	46c0      	nop			; (mov r8, r8)
    1e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1e32:	bc08      	pop	{r3}
    1e34:	469e      	mov	lr, r3
    1e36:	4770      	bx	lr

00001e38 <__init_array_start>:
    1e38:	000000b5 	.word	0x000000b5

00001e3c <_fini>:
    1e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1e42:	bc08      	pop	{r3}
    1e44:	469e      	mov	lr, r3
    1e46:	4770      	bx	lr

00001e48 <__fini_array_start>:
    1e48:	0000008d 	.word	0x0000008d
